---
description: Standards for PHP and Drupal development
globs: *.php, *.module, *.inc, *.install, *.theme
---
# Enhanced PHP and Drupal Development Standards

Ensures adherence to PHP 8.3+ features and Drupal development best practices for improved code quality, security, and maintainability.

> Priority: critical Â· Version: 1.1

## Applies To
- `*.php`
- `*.module`
- `*.inc`
- `*.install`
- `*.theme`

## Trigger Conditions
- Files matching pattern `\.(php|module|inc|install|theme)$`
- Paths matching `web/modules/custom/|web/themes/custom/`

## Required Checks

- Add 'declare(strict_types=1);' at the beginning of PHP files for type safety.
- Consider using readonly properties where immutability is required for better code safety.
- Add return type declarations for all methods to enhance type safety.
- Add #[Override] attribute for overridden methods for clear intent.
- Use typed properties with proper nullability to improve code readability and prevent errors.
- Add type hints and return types for all hooks to leverage PHP's type system.
- Use proper dependency injection with services for better testability and modularity.
- Implement proper form validation in FormBase classes for security.
- Use uppercase for TRUE, FALSE, and NULL constants for consistency.
- Ensure inline comments begin with a capital letter and end with a period for readability.
- Use ConfigFactory for configuration management to ensure proper dependency injection.

## Recommendations

**PHP/Drupal Development Best Practices:**
- **File Structure:** Place module files in `web/modules/custom/[module_name]/` for organization.
- **Module Files:** Ensure modules include .info.yml, .module, .libraries.yml, .services.yml where applicable.
- **Dependencies:** Use hook_requirements() to manage external dependencies.
- **Forms:** Use FormBase or ConfigFormBase for creating forms, always include CSRF protection.
- **Caching:** Apply proper cache tags and contexts for performance optimization.
- **Error Handling & Logging:** Implement robust error handling and logging using Drupal's mechanisms.
- **Type Safety:** Leverage type safety in form methods and throughout your code.
- **Dependency Injection:** Follow Drupal's dependency injection patterns for better maintainability.
- **Service Container:** Use Drupal's service container to manage dependencies.
- **Security:** Validate all user inputs, use Drupal's security practices like sanitization and escaping.
- **Schema Updates:** Implement hook_update_N() for database schema changes.
- **Translation:** Use Drupal's t() function for all user-facing strings.

## Validation

- Ensure each custom module has a required .info.yml file.
- Ensure module has .module file if hooks are implemented.
- Place form classes in the Form directory for consistency.
- Implement proper exception handling in catch blocks for robustness.

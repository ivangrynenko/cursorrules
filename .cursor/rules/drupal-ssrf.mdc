---
description: Detect and prevent Server-Side Request Forgery (SSRF) vulnerabilities in Drupal applications as defined in OWASP Top 10:2021-A10
globs: *.php, *.inc, *.module, *.install, *.theme
alwaysApply: false
---
# Drupal Server-Side Request Forgery Standards (OWASP A10:2021)

This rule enforces security best practices to prevent Server-Side Request Forgery (SSRF) vulnerabilities in Drupal applications, as defined in OWASP Top 10:2021-A10.

> Priority: high Â· Version: 1.0

## Applies To
- `*.php`
- `*.inc`
- `*.module`
- `*.install`
- `*.theme`

## Trigger Conditions
- Files matching pattern `\.(php|inc|module|install|theme)$`
- Paths matching `.*`

## Required Checks

- Potential SSRF vulnerability: URL constructed with user input. Validate and sanitize user-supplied URL parameters before making requests.
- Validate and restrict URLs before making HTTP requests with Guzzle to prevent SSRF attacks.
- HTTP requests should validate URLs with \Drupal\Component\Utility\UrlHelper::isValid() before execution to prevent SSRF.
- Potential SSRF vulnerability: URL being constructed with variable concatenation. Use URL validation and allowlisting.
- Avoid using PHP wrappers with file operations that could lead to SSRF vulnerabilities.
- Bypassing proxy settings can lead to SSRF vulnerabilities. Maintain proper proxy configurations.
- XML processing without disabling external entities can lead to XXE and SSRF. Use libxml_disable_entity_loader(true).
- Hardcoded internal IP addresses or localhost may facilitate SSRF attacks if exposed to user manipulation.
- Always validate URLs with UrlHelper::isValid() before making HTTP requests with Drupal's HTTP client.
- Potential SSRF vulnerability: Restrict allowed ports for outbound HTTP requests to prevent service probing.

## Recommendations

**Drupal SSRF Prevention Best Practices:**

1. **Input Validation for URLs:**
   - Always validate any user-supplied URL or URL components
   - Use `\Drupal\Component\Utility\UrlHelper::isValid()` to validate URLs
   - Implement allowlists rather than blocklists for domains/IPs
   - Parse URLs and validate each component (protocol, domain, port, path)
   
2. **Network-Level Controls:**
   - Implement network-level access controls for internal services
   - Use application firewalls to restrict outbound connections
   - Configure proxies to control and monitor outbound requests
   - Segment sensitive internal services from public-facing applications
   
3. **Request Handling:**
   - Avoid passing raw user input to HTTP clients
   - Set reasonable timeouts for all HTTP requests
   - Disable HTTP redirects or limit redirect chains
   - Validate response types match expected formats
   - Use dedicated service accounts with minimal privileges for API calls
   
4. **Drupal-Specific Controls:**
   - Utilize Drupal's built-in UrlHelper class for URL validation
   - Configure Guzzle HTTP client with appropriate security options
   - Consider using middleware to enforce URL validation
   - Use Drupal's logging system to record suspicious outbound requests
   - Implement specific content security policies
   
5. **Authentication and Access Controls:**
   - Implement proper authentication for internal service calls
   - Use context-specific API tokens with limited privileges
   - Avoid exposing service credentials in code or configurations
   - Implement rate limiting for outbound requests

## Validation

- Using proper URL validation with UrlHelper.
- Implementing domain/URL allowlisting for outbound requests.
- Properly disabling XML external entities.
- Using Drupal's HTTP client with explicit options.

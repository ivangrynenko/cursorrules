---
description: Detect and prevent vulnerabilities related to outdated dependencies and components in Python applications as defined in OWASP Top 10:2021-A06
globs: *.py, *.txt, *.ini, *.cfg, *.yml, *.yaml, *.json, *.toml
alwaysApply: false
---
# Python Vulnerable and Outdated Components Standards (OWASP A06:2021)

This rule enforces security best practices to prevent vulnerabilities related to outdated dependencies and components in Python applications, as defined in OWASP Top 10:2021-A06.

> Priority: high Â· Version: 1.0

## Applies To
- `*.py`
- `*.txt`
- `*.ini`
- `*.cfg`
- `*.yml`
- `*.yaml`
- `*.json`
- `*.toml`

## Trigger Conditions
- Files matching pattern `\.(py|txt|ini|cfg|yml|yaml|json|toml)$`
- Paths matching `.*`

## Required Checks

- Unpinned dependency detected. Always pin dependencies to specific versions to prevent automatic updates to potentially vulnerable versions.
- Potentially outdated Django version detected. Consider upgrading to the latest stable version with security updates.
- Potentially outdated Flask version detected. Consider upgrading to the latest stable version with security updates.
- Potentially outdated Requests version detected. Consider upgrading to the latest stable version with security updates.
- Potentially outdated Cryptography version detected. Consider upgrading to the latest stable version with security updates.
- Potentially outdated PyYAML version detected. Consider upgrading to the latest stable version with security updates.
- Potentially outdated Pillow version detected. Consider upgrading to the latest stable version with security updates.
- Use of deprecated or insecure module detected. Consider using more secure alternatives.
- Use of deprecated or insecure function detected. Consider using more secure alternatives.
- Dynamic code execution or module loading detected. This can lead to code injection if user input is involved.
- Outdated TLS/SSL protocol version detected. Use ssl.PROTOCOL_TLS_CLIENT or ssl.PROTOCOL_TLS_SERVER instead.
- Use of potentially insecure deserialization library detected. Ensure these are not used with untrusted data.
- Potentially outdated SQLAlchemy version detected. Consider upgrading to the latest stable version with security updates.
- Potentially outdated Celery version detected. Consider upgrading to the latest stable version with security updates.
- Insecure pip installation options detected. Avoid using --no-deps, ensure HTTPS for index URLs, and be cautious with --pre and --user flags.

## Recommendations

**Python Dependency and Component Security Best Practices:**

1. **Dependency Management:**
   - Always pin dependencies to specific versions
   - Use a lockfile (requirements.txt, Pipfile.lock, poetry.lock)
   - Example requirements.txt:
     ```
     Django==4.2.7
     requests==2.31.0
     cryptography==41.0.5
     ```

2. **Vulnerability Scanning:**
   - Regularly scan dependencies for vulnerabilities
   - Use tools like safety, pip-audit, or dependabot
   - Example safety check:
     ```bash
     pip install safety
     safety check -r requirements.txt
     ```

3. **Dependency Updates:**
   - Establish a regular update schedule
   - Automate updates with tools like Renovate or Dependabot
   - Test thoroughly after updates
   - Example GitHub workflow:
     ```yaml
     name: Dependency Update
     on:
       schedule:
         - cron: '0 0 * * 1'  # Weekly on Monday
     jobs:
       update-deps:
         runs-on: ubuntu-latest
         steps:
           - uses: actions/checkout@v3
           - name: Update dependencies
             run: |
               pip install pip-upgrader
               pip-upgrader -p requirements.txt
     ```

4. **Secure Package Installation:**
   - Use trusted package sources
   - Verify package integrity with hashes
   - Example with pip and hashes:
     ```
     # requirements.txt
     Django==4.2.7 --hash=sha256:8e0f1c2c2786b5c0e39fe1afce24c926040fad47c8ea8ad30aaa2c03b76293b8
     ```

5. **Minimal Dependencies:**
   - Limit the number of dependencies
   - Regularly audit and remove unused dependencies
   - Consider security history when selecting packages
   - Example dependency audit:
     ```bash
     pip install pipdeptree
     pipdeptree --warn silence | grep -v "^\s"
     ```

6. **Virtual Environments:**
   - Use isolated environments for each project
   - Document environment setup
   - Example:
     ```bash
     python -m venv venv
     source venv/bin/activate  # On Windows: venv\Scripts\activate
     pip install -r requirements.txt
     ```

7. **Container Security:**
   - Use official base images
   - Pin image versions
   - Scan container images
   - Example Dockerfile:
     ```dockerfile
     FROM python:3.11-slim@sha256:1234567890abcdef
     
     WORKDIR /app
     COPY requirements.txt .
     RUN pip install --no-cache-dir -r requirements.txt
     
     COPY . .
     RUN pip install --no-cache-dir -e .
     
     USER nobody
     CMD ["gunicorn", "myapp.wsgi:application"]
     ```

8. **Compile-time Dependencies:**
   - Separate runtime and development dependencies
   - Example with pip-tools:
     ```
     # requirements.in
     Django>=4.2,<5.0
     requests>=2.31.0
     
     # dev-requirements.in
     -r requirements.in
     pytest>=7.0.0
     black>=23.0.0
     ```

9. **Deprecated API Usage:**
   - Stay informed about deprecation notices
   - Plan migrations away from deprecated APIs
   - Example Django deprecation check:
     ```bash
     python manage.py check --deploy
     ```

10. **Supply Chain Security:**
    - Use tools like pip-audit to check for supply chain attacks
    - Consider using a private PyPI mirror
    - Example:
      ```bash
      pip install pip-audit
      pip-audit
      ```

## Validation

- Dependencies are properly pinned to specific versions.
- Dependency scanning tools are being used.
- Using secure TLS protocol versions.
- Using secure random generation methods.

---
description: Detect and prevent identification and authentication failures in Drupal as defined in OWASP Top 10:2021-A07
globs: *.php, *.inc, *.module, *.install, *.info.yml, *.theme
alwaysApply: false
---
# Drupal Identification and Authentication Failures Standards (OWASP A07:2021)

This rule enforces security best practices to prevent identification and authentication failures in Drupal applications, as defined in OWASP Top 10:2021-A07.

> Priority: high Â· Version: 1.0

## Applies To
- `*.php`
- `*.inc`
- `*.module`
- `*.install`
- `*.info.yml`
- `*.theme`

## Trigger Conditions
- Files matching pattern `\.(php|inc|module|install|theme|yml)$`
- Paths matching `.*`

## Required Checks

- Ensure strong password policies are configured to require complexity, length, and prevent common passwords.
- Custom authentication functions should implement proper validation and not return TRUE without checks.
- Avoid direct password comparison. Use Drupal's built-in password verification services.
- Hardcoded credentials detected. Store credentials securely outside of code.
- Ensure proper CSRF protection is implemented for all authenticated actions.
- Use Drupal's session management. If custom code is required, ensure secure session handling practices.
- Ensure proper account lockout and flood control mechanisms are configured to prevent brute force attacks.
- Verify password reset functionality uses secure tokens with proper expiration and validation.
- Consider implementing multi-factor authentication for sensitive operations or user roles.
- Avoid creating default administrator accounts or test users in production code.

## Recommendations

**Drupal Authentication Security Best Practices:**

1. **Password Policies:**
   - Use Drupal's Password Policy module for enforcing strong passwords
   - Configure minimum password length (12+ characters recommended)
   - Require complexity (uppercase, lowercase, numbers, special characters)
   - Implement password rotation for sensitive roles
   - Check passwords against known breached password databases

2. **Authentication Infrastructure:**
   - Use Drupal's core authentication mechanisms rather than custom solutions
   - Implement proper account lockout after failed login attempts
   - Consider multi-factor authentication (TFA module) for privileged accounts
   - Implement session timeout for inactivity
   - Use HTTPS for all authentication traffic

3. **Session Management:**
   - Use Drupal's session management system rather than PHP's session functions
   - Configure secure session cookie settings in settings.php
   - Implement proper session regeneration on privilege changes
   - Consider using the Session Limit module to restrict concurrent sessions
   - Properly destroy sessions on logout

4. **Account Management:**
   - Implement proper account provisioning and deprovisioning processes
   - Use email verification for new account registration
   - Implement secure password reset mechanisms with limited-time tokens
   - Apply the principle of least privilege for user roles
   - Regularly audit user accounts and permissions

5. **Authentication Hardening:**
   - Monitor for authentication failures and suspicious patterns
   - Implement IP-based and username-based flood control
   - Log authentication events for security monitoring
   - Consider CAPTCHA or reCAPTCHA for login forms
   - Use OAuth or SAML for single sign-on where appropriate

## Validation

- Using Drupal's password services correctly.
- Form includes CSRF protection token.
- Using Drupal's session management services.
- Implementing user flood protection.

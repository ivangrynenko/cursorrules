---
description: Standards for Lagoon configuration files and deployment workflows
globs: .lagoon.yml, .lagoon.*.yml
---
# Lagoon Configuration Standards

Ensures proper configuration and best practices for Lagoon deployment files, focusing on environment configuration, routes, tasks, and deployment workflows.

> Priority: critical Â· Version: 1.1

## Applies To
- `.lagoon.yml`
- `.lagoon.*.yml`

## Trigger Conditions
- Files matching pattern `\.(yml|yaml)$`
- Filter `file_name` matching `^\.lagoon(\.\w+)?\.yml$`

## Required Checks

- Ensure tls-acme is set to 'false' until DNS points to Lagoon to prevent certificate issuance failures
- Wrap Drush commands in proper error handling using '|| exit 1' to ensure deployment fails on command errors
- Add conditional checks for pre-rollout tasks to ensure they only run when necessary
- Use 'M' or 'H' notation for randomized cron scheduling to prevent server load spikes
- Consider configuring redirects for routes to handle legacy URLs or domain migrations

## Recommendations

## Lagoon Configuration Best Practices:

### Environment Configuration
- Use environment-specific configurations for different deployment targets
- Define environment types for proper resource allocation
- Configure environment variables specific to each environment
- Use environment-specific routes and domains

### Routes Configuration
- Configure routes with appropriate SSL settings
- Set up redirects for legacy URLs
- Configure proper insecure traffic handling (Allow or Redirect)
- Use wildcard domains for feature branch environments

### Tasks Configuration
- Implement proper pre-rollout tasks with error handling
- Configure post-rollout tasks with appropriate conditions
- Use conditional task execution based on environment
- Include database sync in PR environments
- Implement proper backup strategies before major changes

### Cron Configuration
- Use randomized cron schedules with 'M' and 'H' notation
- Set appropriate frequency for different tasks
- Ensure cron jobs have proper error handling
- Use descriptive names for cron jobs

### Example Configuration:
```yaml
environments:
  main:
    cronjobs:
      - name: drush-cron
        schedule: '*/15 * * * *'
        command: drush cron
        service: cli
    routes:
      - nginx:
        - example.com:
            tls-acme: true
            insecure: Redirect
            redirects:
              - www.example.com
    tasks:
      pre-rollout:
        - run:
            name: Drush pre-update
            command: |
              if drush status --fields=bootstrap | grep -q "Successful"; then
                drush state:set system.maintenance_mode 1 -y
                drush cr
              fi
            service: cli
      post-rollout:
        - run:
            name: Drush post-update
            command: |
              drush updb -y || exit 1
              drush cr
              drush state:set system.maintenance_mode 0 -y
            service: cli
```

## Validation

- Define environment types for proper resource allocation and environment-specific configuration
- Include both pre and post rollout tasks for robust deployments and proper application state management
- Configure proper insecure traffic handling to ensure secure access to your application
- Consider implementing a backup strategy for critical environments to prevent data loss
- Specify the service for cron jobs to ensure they run in the correct container

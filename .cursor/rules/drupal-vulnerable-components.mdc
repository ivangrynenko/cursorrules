---
description: Detect and prevent vulnerabilities related to outdated or vulnerable components in Drupal as defined in OWASP Top 10:2021-A06
globs: *.php, *.install, *.module, *.inc, *.theme, *.yml, *.info
alwaysApply: false
---
# Drupal Vulnerable and Outdated Components Standards (OWASP A06:2021)

This rule enforces security best practices to prevent vulnerabilities related to outdated or vulnerable components in Drupal applications, as defined in OWASP Top 10:2021-A06.

> Priority: high Â· Version: 1.0

## Applies To
- `*.php`
- `*.install`
- `*.module`
- `*.inc`
- `*.theme`
- `*.yml`
- `*.info`

## Trigger Conditions
- Files matching pattern `\.(php|inc|module|install|info\.yml|json)$`
- Paths matching `.*`

## Required Checks

- Potentially outdated Drupal core version detected. Consider upgrading to the latest secure version of Drupal 9 or 10.
- Deprecated function detected. Use modern replacements to ensure compatibility and security updates.
- Potentially vulnerable JavaScript library version detected. Update to the latest secure version.
- External scripts or stylesheets without Subresource Integrity (SRI) checks detected. Add integrity and crossorigin attributes.
- Potentially vulnerable or deprecated module detected. Consider using more secure alternatives.
- Hard-coded specific version detected in composer.json. Consider using version ranges to receive security updates.
- Deprecated or insecure PHP function detected. Use modern alternatives for better security.
- Ensure your module specifies core_version_requirement to prevent installation on unsupported Drupal versions.
- Consider adding drupal/core-security-advisories as a dev dependency to detect known vulnerable packages.
- Legacy text sanitization function detected. Use Html::escape() or Xss::filter() instead.

## Recommendations

**Drupal Component Security Best Practices:**

1. **Update Management:**
   - Keep Drupal core updated to the latest secure version
   - Subscribe to the Drupal Security Newsletter
   - Implement a regular update schedule (monthly at minimum)
   - Use security advisories checking in your development workflow
   - Implement Composer's security-advisories metadata

2. **Dependency Management:**
   - Use Composer for managing all dependencies
   - Specify version constraints that allow security updates
   - Add drupal/core-security-advisories as a dev dependency
   - Regularly run `composer update --with-dependencies`
   - Use `composer outdated` to identify outdated packages

3. **API Usage:**
   - Use modern Drupal APIs rather than deprecated functions
   - Migrate away from jQuery to modern JavaScript where possible
   - Implement Subresource Integrity (SRI) for external resources
   - Update custom code to use current best practices
   - Follow the Drupal API deprecation policies

4. **Security Monitoring:**
   - Implement automated vulnerability scanning in CI/CD
   - Use tools like Drupal Check or Upgrade Status module
   - Monitor the Drupal security advisories page
   - Implement automated updates for non-critical dependencies
   - Set up alerts for security issues in used components

5. **Module Management:**
   - Remove unused modules from your codebase
   - Prefer well-maintained modules with security teams
   - Implement proper version constraints in module info files
   - Consider the security impact before adding new dependencies
   - Document your dependency management practices

## Validation

- Using proper core version requirements.
- Using modern message API instead of deprecated functions.
- Using proper version constraints in Composer.
- Properly implementing Subresource Integrity.

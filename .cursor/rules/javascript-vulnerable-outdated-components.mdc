---
description: Detect and prevent the use of vulnerable and outdated components in JavaScript applications as defined in OWASP Top 10:2021-A06
globs: **/*.js, **/*.jsx, **/*.ts, **/*.tsx, !**/node_modules/**, !**/dist/**, !**/build/**, !**/coverage/**
---
# JavaScript Vulnerable and Outdated Components (OWASP A06:2021)

> Priority: high Â· Version: 1.0

## Applies To
- `**/*.js`
- `**/*.jsx`
- `**/*.ts`
- `**/*.tsx`
- `!**/node_modules/**`
- `!**/dist/**`
- `!**/build/**`
- `!**/coverage/**`

## Required Checks

- Check for outdated dependencies in package.json. Regularly update dependencies to avoid known vulnerabilities.
- CDN resources without integrity hashes. Add integrity and crossorigin attributes to script tags loading external resources.
- Hardcoded library versions in HTML. Consider using a package manager to manage dependencies.
- Using deprecated Node.js APIs. Replace with modern alternatives to avoid security and maintenance issues.
- Using deprecated browser APIs. Replace with modern alternatives to avoid compatibility and security issues.
- Dynamic dependency loading with variable concatenation. This can lead to dependency confusion attacks.
- Potentially vulnerable regular expression pattern that could lead to ReDoS attacks. Review and optimize the regex pattern.
- Insecure package installation flags. Avoid using --no-audit, --no-save, or --force flags when installing packages.
- Missing lock file. Use package-lock.json, yarn.lock, or pnpm-lock.yaml to ensure dependency consistency.
- Potentially insecure webpack configuration. Consider enabling noEmitOnErrors and optimization.minimize.
- Outdated TypeScript target. Consider using a more modern target like ES2020 for better security features.
- Using a non-standard npm registry. Ensure you trust the source of your packages.
- Missing npm audit in CI/CD scripts. Add 'npm audit' to your CI/CD pipeline to detect vulnerabilities.
- Insecure import maps without integrity checks. Add integrity hashes to import map entries.
- Using potentially outdated polyfills. Consider using modern alternatives or feature detection.

## Recommendations

**JavaScript Vulnerable and Outdated Components Best Practices:**

1. **Dependency Management:**
   - Regularly update dependencies to their latest secure versions
   - Use tools like npm audit, Snyk, or Dependabot to detect vulnerabilities
   - Example:
     ```javascript
     // Add these scripts to package.json
     {
       "scripts": {
         "audit": "npm audit",
         "audit:fix": "npm audit fix",
         "outdated": "npm outdated",
         "update": "npm update",
         "prestart": "npm audit --production"
       }
     }
     ```

2. **Lock Files:**
   - Always use lock files (package-lock.json, yarn.lock, or pnpm-lock.yaml)
   - Commit lock files to version control
   - Example:
     ```bash
     # Generate a lock file if it doesn't exist
     npm install
     
     # Or for Yarn
     yarn
     
     # Or for pnpm
     pnpm install
     ```

3. **Subresource Integrity:**
   - Use integrity hashes when loading resources from CDNs
   - Example:
     ```html
     <script 
       src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js" 
       integrity="sha384-tMH8h3BGESGckSAVGZ82T9n90ztNepwCjSPJ0A7g2vdY8M0oKtDaDGg0G53cysJA" 
       crossorigin="anonymous">
     </script>
     ```

4. **Automated Security Scanning:**
   - Integrate security scanning into your CI/CD pipeline
   - Example GitHub Actions workflow:
     ```yaml
     name: Security Scan
     
     on:
       push:
         branches: [ main ]
       pull_request:
         branches: [ main ]
       schedule:
         - cron: '0 0 * * 0'  # Run weekly
     
     jobs:
       security:
         runs-on: ubuntu-latest
         steps:
           - uses: actions/checkout@v3
           - name: Setup Node.js
             uses: actions/setup-node@v3
             with:
               node-version: '18'
               cache: 'npm'
           - name: Install dependencies
             run: npm ci
           - name: Run security audit
             run: npm audit --audit-level=high
           - name: Run Snyk to check for vulnerabilities
             uses: snyk/actions/node@master
             env:
               SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
     ```

5. **Dependency Pinning:**
   - Pin dependencies to specific versions to prevent unexpected updates
   - Example:
     ```json
     {
       "dependencies": {
         "express": "4.18.2",
         "react": "18.2.0",
         "lodash": "4.17.21"
       }
     }
     ```

6. **Deprecated API Replacement:**
   - Replace deprecated Node.js APIs with modern alternatives
   - Example:
     ```javascript
     // INSECURE: Using deprecated Buffer constructor
     const buffer = new Buffer(data);
     
     // SECURE: Using Buffer.from()
     const buffer = Buffer.from(data);
     
     // INSECURE: Using deprecated crypto methods
     const crypto = require('crypto');
     const cipher = crypto.createCipher('aes-256-cbc', key);
     
     // SECURE: Using modern crypto methods
     const crypto = require('crypto');
     const iv = crypto.randomBytes(16);
     const cipher = crypto.createCipheriv('aes-256-cbc', key, iv);
     ```

7. **Browser API Modernization:**
   - Replace deprecated browser APIs with modern alternatives
   - Example:
     ```javascript
     // INSECURE: Using document.write
     document.write('<h1>Hello World</h1>');
     
     // SECURE: Using DOM manipulation
     document.getElementById('content').innerHTML = '<h1>Hello World</h1>';
     
     // INSECURE: Using escape/unescape
     const encoded = escape(data);
     
     // SECURE: Using encodeURIComponent
     const encoded = encodeURIComponent(data);
     ```

8. **Safe Dynamic Imports:**
   - Avoid dynamic imports with variable concatenation
   - Example:
     ```javascript
     // INSECURE: Dynamic import with concatenation
     const moduleName = userInput;
     import('./' + moduleName + '.js');
     
     // SECURE: Validate input against a whitelist
     const validModules = ['module1', 'module2', 'module3'];
     if (validModules.includes(moduleName)) {
       import(`./${moduleName}.js`);
     }
     ```

9. **Regular Expression Safety:**
   - Avoid vulnerable regex patterns that could lead to ReDoS attacks
   - Example:
     ```javascript
     // INSECURE: Vulnerable regex pattern
     const regex = /^(a+)+$/;
     
     // SECURE: Optimized regex pattern
     const regex = /^a+$/;
     ```

10. **Vendor Management:**
    - Evaluate the security posture of third-party libraries before use
    - Prefer libraries with active maintenance and security focus
    - Example evaluation criteria:
      - When was the last commit?
      - How quickly are security issues addressed?
      - Does the project have a security policy?
      - Is there a responsible disclosure process?
      - How many open issues and pull requests exist?
      - What is the download count and GitHub stars?

11. **Runtime Dependency Checking:**
    - Implement runtime checks for critical dependencies
    - Example:
      ```javascript
      // Check package version at runtime for critical dependencies
      try {
        const packageJson = require('some-critical-package/package.json');
        const semver = require('semver');
        
        if (semver.lt(packageJson.version, '2.0.0')) {
          console.warn('Warning: Using a potentially vulnerable version of some-critical-package');
        }
      } catch (err) {
        console.error('Error checking package version:', err);
      }
      ```

12. **Minimal Dependencies:**
    - Minimize the number of dependencies to reduce attack surface
    - Regularly audit and remove unused dependencies
    - Example:
      ```bash
      # Find unused dependencies
      npx depcheck
      
      # Analyze your bundle size
      npx webpack-bundle-analyzer
      ```

## Validation

- Using npm audit to check for vulnerabilities.
- Using lock files to ensure dependency consistency.
- Using subresource integrity hashes for external resources.
- Using modern Buffer API instead of deprecated constructor.
- Integrating dependency scanning in CI/CD pipeline.

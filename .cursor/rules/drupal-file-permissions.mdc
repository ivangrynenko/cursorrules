---
description: Drupal file permissions security standards
globs: *.dockerfile, *.sh, docker-compose.yml, Dockerfile
---
# Drupal File Permissions Security

Standards for securing Drupal file permissions in Docker environments and production servers, ensuring proper security while maintaining functionality.

> Priority: high Â· Version: 1.1

## Applies To
- `*.dockerfile`
- `*.sh`
- `docker-compose.yml`
- `Dockerfile`

## Trigger Conditions
- Files matching pattern `\.(dockerfile|sh|yml)$`
- Filter `file_name` matching `^Dockerfile$|^docker-compose\.yml$`
- Files containing `(?i)chmod|chown|drupal|settings\.php|services\.yml`

## Required Checks

- sites/default directory should have 755 permissions (read-only for group/others)
- settings.php should have 444 permissions (read-only for everyone)
- services.yml should have 444 permissions (read-only for everyone)
- sites/default/files directory should have 755 permissions with proper ownership
- sites/default/files should be owned by the web server user (www-data:www-data)

## Recommendations

## Drupal File Permissions Security Best Practices

### 1. Critical File Permissions
- **sites/default directory**: 755 (drwxr-xr-x)
- **settings.php**: 444 (r--r--r--)
- **services.yml**: 444 (r--r--r--)
- **settings.local.php**: 444 (r--r--r--)
- **sites/default/files**: 755 (drwxr-xr-x)
- **sites/default/files/** (contents): 644 (rw-r--r--) for files, 755 (drwxr-xr-x) for directories

### 2. Ownership Configuration
- **Web root**: application user (varies by environment)
- **sites/default/files**: web server user (www-data:www-data)

### 3. Implementation in Dockerfile
```dockerfile
# Set proper permissions for Drupal
RUN mkdir -p /app/${WEBROOT}/sites/default/files && \
    chown www-data:www-data /app/${WEBROOT}/sites/default/files && \
    chmod 755 /app/${WEBROOT}/sites/default && \
    chmod 444 /app/${WEBROOT}/sites/default/settings.php && \
    chmod 444 /app/${WEBROOT}/sites/default/services.yml && \
    find /app/${WEBROOT}/sites/default/files -type d -exec chmod 755 {} \\; && \
    find /app/${WEBROOT}/sites/default/files -type f -exec chmod 644 {} \\;
```

### 4. Permission Fix Script
Create a script at `/app/scripts/custom/fix-drupal-permissions.sh`:
```bash
#!/bin/bash

# Exit on error
set -e

WEBROOT=${WEBROOT:-web}

echo "Setting Drupal file permissions..."

# Ensure directories exist
mkdir -p /app/${WEBROOT}/sites/default/files

# Set ownership
chown www-data:www-data /app/${WEBROOT}/sites/default/files

# Set directory permissions
chmod 755 /app/${WEBROOT}/sites/default
chmod 755 /app/${WEBROOT}/sites/default/files
find /app/${WEBROOT}/sites/default/files -type d -exec chmod 755 {} \;

# Set file permissions
chmod 444 /app/${WEBROOT}/sites/default/settings.php
[ -f /app/${WEBROOT}/sites/default/services.yml ] && chmod 444 /app/${WEBROOT}/sites/default/services.yml
[ -f /app/${WEBROOT}/sites/default/settings.local.php ] && chmod 444 /app/${WEBROOT}/sites/default/settings.local.php
find /app/${WEBROOT}/sites/default/files -type f -exec chmod 644 {} \;

echo "Drupal file permissions set successfully."
```

### 5. Verify Permissions
```bash
# Check file permissions
ahoy cli "ls -la /app/${WEBROOT}/sites/default"
ahoy cli "ls -la /app/${WEBROOT}/sites/default/files"

# Check Drupal status
ahoy drush status-report | grep -i "protected"
```

### 6. Security Considerations
- Never set 777 permissions on any Drupal files or directories
- Temporary files should be stored in private file system when possible
- Use Drupal's private file system for sensitive uploads
- Implement file access controls through Drupal's permission system
- Consider using file encryption for highly sensitive data

## Examples
### Example 1
```
# Bad: Insecure permissions
RUN chmod 777 /app/${WEBROOT}/sites/default
RUN chmod 666 /app/${WEBROOT}/sites/default/settings.php
RUN chmod -R 777 /app/${WEBROOT}/sites/default/files

# Good: Secure permissions
RUN chmod 755 /app/${WEBROOT}/sites/default
RUN chmod 444 /app/${WEBROOT}/sites/default/settings.php
RUN chmod 444 /app/${WEBROOT}/sites/default/services.yml
RUN chown www-data:www-data /app/${WEBROOT}/sites/default/files
RUN find /app/${WEBROOT}/sites/default/files -type d -exec chmod 755 {} \;
RUN find /app/${WEBROOT}/sites/default/files -type f -exec chmod 644 {} \;
```
Outcome: Correctly set Drupal file permissions with proper security

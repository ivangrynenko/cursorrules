---
description: AI Query Efficiency & Auto-Optimization
globs: *.mdc
---
# AI Query Efficiency & Auto-Optimization

Ensures Cursor analyzes AI query efficiency, detects repeated requests, and automatically updates relevant rules to improve response quality and reduce redundancy.

> Priority: critical Â· Version: 1.2

## Applies To
- `*.mdc`

## Trigger Conditions
- Files matching pattern `\.(md|mdc|txt|json|py|js|ts|php|yaml|yml|cursorrules)$`
- Files containing `(?i)(retry|again|didn't work|not what I expected|try another way|improve|fix this|optimize|rewrite|regenerate)`

## Automation

- **Auto Update:** Updating AI efficiency rules based on detected inefficiencies or repeated queries.
- **Log:** AI Query Efficiency Analysis: [{{query_count}} queries in {{time_period}} detected inefficiency.]

## Recommendations

## Query Optimization Recommendations

I notice you're making multiple requests for similar tasks. Here's how to optimize your AI interactions:

### 1. Refine Your Prompts
- **Be more specific:** Include technical details, file paths, and exact requirements
- **Use structured formats:** For complex requests, use bullet points or numbered lists
- **Include context:** Mention relevant technologies, frameworks, or standards
- **Set clear expectations:** Specify the format and level of detail you need

### 2. Break Down Complex Tasks
- Split large tasks into smaller, focused requests
- Ask for step-by-step approaches for complex problems
- Request specific examples for unclear concepts

### 3. Provide Feedback
- Tell the AI what worked and what didn't in previous responses
- Clarify misunderstandings explicitly
- Highlight successful parts of previous responses

### 4. Use Technical Terminology
- Use precise technical terms for your domain (Drupal, Lagoon, etc.)
- Reference specific functions, methods, or patterns
- Mention relevant standards or best practices

### 5. Leverage Cursor Features
- Use file references when discussing specific code
- Reference line numbers for targeted changes
- Utilize code blocks for examples

The system will now optimize rules based on this interaction pattern to improve future responses.

## Examples
### Example 1
```
"This Drupal module is not working, let's try again."
"That didn't work, let's refine the approach."
"Please rewrite this code to be more efficient."
```
Outcome: Cursor detects inefficiency in queries and suggests:

"I notice you're making multiple attempts. To get better results:
1. Specify which part of the module isn't working
2. Include any error messages you're seeing
3. Mention the Drupal version and relevant modules
4. Describe what you've already tried"

### Example 2
```
"Generate a Lagoon configuration file."
"This doesn't look right, regenerate it."
"Try again with better practices."
```
Outcome: Cursor detects repetition and suggests:

"For better Lagoon configuration results:
1. Specify which services you need (nginx, php, mariadb, etc.)
2. Mention your project type (Drupal, WordPress, etc.)
3. Include any specific environment requirements
4. Reference any existing configuration you want to maintain"


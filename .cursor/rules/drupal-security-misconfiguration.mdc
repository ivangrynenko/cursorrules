---
description: Detect and prevent security misconfigurations in Drupal as defined in OWASP Top 10:2021-A05
globs: *.php, *.install, *.module, *.inc, *.theme, *.yml, *.info
alwaysApply: false
---
# Drupal Security Misconfiguration Standards (OWASP A05:2021)

This rule enforces security best practices to prevent misconfiguration vulnerabilities in Drupal applications, as defined in OWASP Top 10:2021-A05.

> Priority: high Â· Version: 1.0

## Applies To
- `*.php`
- `*.install`
- `*.module`
- `*.inc`
- `*.theme`
- `*.yml`
- `*.info`

## Trigger Conditions
- Files matching pattern `\.(php|inc|module|install|theme|yml|info\.yml)$`
- Paths matching `.*`

## Required Checks

- Development settings detected in production code. Ensure these settings are only enabled in development environments.
- Verify that $settings['trusted_host_patterns'] is properly configured to prevent HTTP Host header attacks.
- Error display should be disabled in production. Use 'hide' for error_level in production.
- Excessively permissive file permissions detected. Use more restrictive permissions.
- Ensure Content-Security-Policy headers are properly configured to prevent XSS attacks.
- Session cookies should be secure and HTTP-only in production environments.
- Ensure $settings['file_private_path'] is properly configured for storing sensitive files.
- Check for development modules (devel, webprofiler, etc.) that should not be enabled in production.
- Remove or secure default/demo content and users in production environments.
- Verify X-Frame-Options, X-Content-Type-Options, X-XSS-Protection, and Referrer-Policy headers are properly configured.

## Recommendations

**Drupal Security Configuration Best Practices:**

1. **Environment-Specific Configurations:**
   - Use `settings.local.php` for environment-specific settings
   - Maintain separate development, staging, and production configurations
   - Never enable development settings in production: update_free_access, rebuild_access, etc.
   - Use environment variables or secrets management for sensitive information

2. **Essential Security Settings:**
   - Configure trusted_host_patterns to prevent HTTP Host header attacks
   - Set secure file permissions (e.g., 0755 for directories, 0644 for files)
   - Configure private file path for sensitive uploads
   - Set file_scan_ignore_directories to prevent public access to sensitive directories
   - Implement secure session cookie settings (HTTPOnly, Secure, SameSite)

3. **Error Handling:**
   - Disable verbose error reporting in production with $config['system.logging']['error_level'] = 'hide'
   - Configure custom error pages that don't leak system information
   - Implement appropriate logging without exposing sensitive data

4. **Security Headers:**
   - Set Content-Security-Policy to restrict resource origins
   - Configure X-Frame-Options to prevent clickjacking
   - Enable X-Content-Type-Options to prevent MIME-type sniffing
   - Set Referrer-Policy to control information in HTTP referers

5. **Module & Extension Security:**
   - Disable and uninstall unnecessary modules in production
   - Keep core and contributed modules updated
   - Remove development modules from production (devel, webprofiler, etc.)
   - Implement proper configuration management workflows

## Validation

- Trusted host patterns are properly configured.
- Secure cookie settings are properly configured.
- Private file path is configured for sensitive files.
- Error reporting is properly configured for production.

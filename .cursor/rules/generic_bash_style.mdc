---
description: Enforce general Bash scripting standards with enhanced logging
globs: 
---
# Enhanced Bash Scripting Standard with Colorized Logging

This rule enforces best practices for writing Bash scripts, with an emphasis on using colorized logging for better output readability.

> Priority: medium Â· Version: 1.1

## Trigger Conditions
- Files matching pattern `\.sh$`

## Required Checks

- All scripts should start with the shebang '#!/usr/bin/env bash'.
- Enable 'set -eu' for script robustness.
- Use conditional 'set -x' based on debug flag.
- Start of formatting block for log functions.
- Include 'note' function for plain messages.
- Include 'info' function for blue informational messages.
- Include 'pass' function for green success messages.
- Include 'fail' function for red error messages.
- Include 'warn' function for yellow warning messages.
- End of formatting block for log functions.

## Recommendations

**Bash Scripting Best Practices:**
- **Error Handling:** Use `set -eu` to catch errors and undefined variables early.
- **Debugging:** Implement conditional debugging with `set -x` using a DEBUG variable.
- **Logging Functions:** Use colorized logging for better script output readability:
  - `note()` for plain notes
  - `info()` for blue informational messages
  - `pass()` for green success messages
  - `fail()` for red error messages
  - `warn()` for yellow warnings, ensuring users can distinguish different types of messages easily
- **Security:** Avoid using `eval` or similar constructs; use safe alternatives.
- **Documentation:** Include descriptive comments, especially for complex logic.
- **Portability:** Use `/usr/bin/env bash` for the shebang to ensure script runs with bash on any system.
- **Variable Checks:** Ensure necessary variables are set, enhancing script reliability.
- **Exit Codes:** Use explicit exit codes for different failure scenarios.
- **Color Support:** Ensure logging functions check for terminal color support before applying colors.

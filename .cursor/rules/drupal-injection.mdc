---
description: Detect and prevent injection vulnerabilities in Drupal as defined in OWASP Top 10:2021-A03
globs: *.php, *.inc, *.module, *.install, *.info.yml, *.theme, **/modules/**, **/themes/**, **/profiles/**
alwaysApply: false
---
# Drupal Injection Prevention Standards (OWASP A03:2021)

Reference this guide when reviewing Drupal code for SQL, XSS, command, or file injection risks.

> Priority: high · Version: 1.0 · Tags: security, drupal, injection

## Applies To
- PHP source under custom modules, themes, or profiles (`modules/`, `themes/`, `profiles/`, `core/`).
- Twig templates and configuration defining markup or executable code.

## Trigger Conditions
- Database queries constructed from request data or dynamic strings.
- Output rendering via `#markup`, controllers, Twig, or JavaScript settings.
- Use of command execution functions, file system access, or redirects influenced by user input.

## Required Checks
- Use parameterized queries with placeholders (`db_query($sql, $args)`, `$connection->query($sql, $args)`, or EntityQuery) instead of string concatenation.
- Escape or sanitise all rendered output using `t()`, `Html::escape()`, `Xss::filter()`, or `#plain_text` as appropriate.
- Validate `#markup` assignments and JavaScript settings before passing user-controlled values.
- Add CSRF tokens to custom forms (`$form['#token']`) and validate with Form API utilities.
- Avoid command execution helpers (`exec`, `shell_exec`, `system`, backticks) unless wrapped with `Symfony\Component\Process\Process` and strict allowlists.
- Validate and whitelist file paths before calling `file_get_contents`, `file_unmanaged_copy`, or similar helpers.
- Guard redirects (`->redirect()`, `Url::fromUserInput()`) with destination allowlists via `UrlHelper::isExternal()` or `UrlHelper::externalIsAllowed()`.

## Recommendations
- Prefer Drupal's Database API condition builders (`->condition()`, `->where()`) and `Database::getConnection()->select()` for complex queries.
- Use Twig templates (auto-escaping) rather than printing raw PHP variables.
- Centralise dangerous operations in services that perform validation and logging.
- Leverage Symfony's Process component or queue workers for long-running external commands with controlled environments.
- Add functional tests covering malicious payloads (SQL injection strings, `<script>` tags, command sequences, traversal paths).

## Positive Signals
- Queries using placeholders with array arguments or EntityQuery builders.
- Output sanitised with `t()`, `Xss::filter()`, `Html::escape()`, or `#plain_text`.
- Forms including CSRF tokens and `FormStateInterface::validateToken()` checks.
- Usage of `UrlHelper::isValid()`, `UrlHelper::externalIsAllowed()`, or destination allowlists in redirect logic.

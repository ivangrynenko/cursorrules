---
description: Detect and prevent security logging and monitoring failures in Drupal as defined in OWASP Top 10:2021-A09
globs: *.php, *.install, *.module, *.inc, *.theme, *.yml
alwaysApply: false
---
# Drupal Security Logging and Monitoring Failures Standards (OWASP A09:2021)

This rule enforces security best practices to prevent logging and monitoring failures in Drupal applications, as defined in OWASP Top 10:2021-A09.

> Priority: high Â· Version: 1.0

## Applies To
- `*.php`
- `*.install`
- `*.module`
- `*.inc`
- `*.theme`
- `*.yml`

## Trigger Conditions
- Files matching pattern `\.(php|inc|module|install|theme|yml)$`
- Paths matching `.*`

## Required Checks

- Critical operations should include logging. Implement proper logging for security-relevant actions.
- Avoid suppressing errors and warnings. Implement proper error handling and logging instead.
- Exceptions should be properly logged, especially in security-critical sections.
- Ensure logging is properly configured and not disabled. Verify log verbosity and retention policies.
- Authentication events should always be logged for security monitoring and auditing.
- Consider logging significant access control decisions, especially denials, for security monitoring.
- File operations should be logged, especially for security-sensitive files.
- Log messages should include sufficient context and detail for effective security monitoring.
- Configuration changes should be logged to maintain an audit trail and detect unauthorized changes.
- API endpoint access should be logged for security monitoring, especially for sensitive operations.

## Recommendations

**Drupal Security Logging & Monitoring Best Practices:**

1. **Comprehensive Logging Implementation:**
   - Use Drupal's Logger Factory service: `\Drupal::logger('module_name')`
   - Implement proper log levels: emergency, alert, critical, error, warning, notice, info, debug
   - Include context in log messages with relevant identifiers and information
   - Log security-relevant events consistently across the application
   - Structure log messages to facilitate automated analysis

2. **Critical Events to Log:**
   - Authentication events (login attempts, failures, logouts)
   - Access control decisions (particularly denials)
   - All administrative actions
   - Data modification operations on sensitive information
   - Configuration and settings changes
   - File operations (uploads, downloads of sensitive content)
   - API access and usage

3. **Logging Configuration:**
   - Configure appropriate log retention periods based on security requirements
   - Implement log rotation to maintain performance
   - Consider using syslog for centralized logging
   - Protect log files from unauthorized access and modification
   - Configure appropriate verbosity for different environments

4. **Monitoring Implementation:**
   - Define security-relevant log patterns to monitor
   - Implement log aggregation and analysis
   - Set up alerts for suspicious activity patterns
   - Establish response procedures for security events
   - Consider integration with SIEM solutions

5. **Error Handling:**
   - Log exceptions with appropriate error levels
   - Include stack traces in development but not production
   - Implement custom error handlers that ensure proper logging
   - Avoid suppressing errors that might indicate security issues
   - Monitor for patterns in error logs that could indicate attacks

## Validation

- Using Drupal's logger service correctly.
- Including context information in log messages.
- Configuring logging appropriately.
- Properly logging exceptions.

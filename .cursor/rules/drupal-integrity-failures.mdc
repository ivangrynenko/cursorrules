---
description: Detect and prevent software and data integrity failures in Drupal as defined in OWASP Top 10:2021-A08
globs: *.php, *.install, *.module, *.inc, *.theme, *.yml, *.json
alwaysApply: false
---
# Drupal Software and Data Integrity Failures Standards (OWASP A08:2021)

This rule enforces security best practices to prevent software and data integrity failures in Drupal applications, as defined in OWASP Top 10:2021-A08.

> Priority: high Â· Version: 1.0

## Applies To
- `*.php`
- `*.install`
- `*.module`
- `*.inc`
- `*.theme`
- `*.yml`
- `*.json`

## Trigger Conditions
- Files matching pattern `\.(php|inc|module|install|theme|yml|json)$`
- Paths matching `.*`

## Required Checks

- Insecure PHP deserialization detected. Use safer alternatives like JSON for data interchange or implement proper validation before deserialization.
- Potentially dangerous code execution function detected. Avoid dynamic code execution whenever possible.
- Dynamic inclusion of files based on user input is dangerous. Use validated, allowlisted paths only.
- Ensure update hooks validate the integrity of updates and data transformations to prevent unauthorized modifications.
- Validate configuration before import to ensure integrity and detect potentially malicious changes.
- Always validate data from remote sources before processing or storing it. Implement integrity checks for remote content.
- Verify you're using secure Composer practices: validate package signatures, pin dependencies, and use composer.lock.
- Direct database modifications should implement validation to preserve data integrity. Prefer using entity API.
- Implement file integrity checking for uploaded or manipulated files to prevent malicious content.
- Validate all input used to create entity objects to maintain data integrity and prevent creating malicious entities.

## Recommendations

**Drupal Data & Software Integrity Best Practices:**

1. **Secure Deserialization:**
   - Avoid PHP's unserialize() with untrusted data entirely
   - Use JSON or other structured formats for data interchange
   - When deserialization is necessary, implement allowlists and validation
   - Consider using Drupal's typed data API for structured data handling
   - Avoid serializing sensitive data that could be tampered with

2. **Update & Configuration Integrity:**
   - Validate data before and after migrations/updates
   - Implement checksums/hashing for critical configuration
   - Use Drupal's Configuration Management system properly
   - Monitor configuration changes for unauthorized modifications
   - Implement proper workflow for configuration management

3. **Dependency & Plugin Security:**
   - Verify the integrity of downloaded modules and themes
   - Use Composer with package signature verification
   - Pin dependencies to specific versions in production
   - Maintain awareness of security advisories
   - Implement proper validation for plugin/module loading

4. **CI/CD Pipeline Security:**
   - Sign build artifacts
   - Verify signatures during deployment
   - Implement proper secrets management
   - Control access to build and deployment systems
   - Validate code changes through code reviews

5. **Data Integrity Validation:**
   - Use database constraints to enforce data integrity
   - Implement validation at every layer of the application
   - Add integrity checks for critical data flows
   - Maintain audit logs for data modifications
   - Regularly verify data consistency

## Validation

- Using safer serialization alternatives.
- Properly validating entity data.
- Implementing configuration validation.
- Using file validation mechanisms.

---
description: PHP memory optimisation standards and actionable checks
globs: *.php, *.ini
---
# PHP Memory Optimisation Standards

Actionable guidance for reducing peak memory usage in PHP code and configuration across heterogeneous projects.

> Priority: high · Version: 1.0 (PHP code) · Version: 1.0 (php.ini guidance)

## Applies To
- `*.php`
- `*.ini`

## Trigger Conditions
- Data access layers loading large result sets or files.
- Loops performing expensive array operations or repeated merges.
- php.ini or runtime configuration controlling OPcache and garbage collection.

## Required Checks (PHP Code)
- Replace `fetchAll()`/`mysqli_fetch_all()` on large queries with streaming loops (`fetch()` while loops, generators, iterators).
- Avoid `file_get_contents()`/`file()` inside loops when processing large files; stream with `SplFileObject`, chunked reads, or generators.
- Minimise array copies (e.g., prefer `$array[] =` over `array_merge()` inside loops, preallocate when possible).
- Review uses of `range()` that may allocate huge arrays; consider generators or iterators for large ranges.
- Release references to large structures (`unset`, `gc_collect_cycles`) in long-running scripts once data is no longer needed.

## Required Checks (PHP Configuration)
- Ensure OPcache is enabled in production (`opcache.enable=1`, `opcache.enable_cli=1` for CLI heavy workloads).
- Size OPcache memory and interned string buffers to match project footprint (`opcache.memory_consumption`, `opcache.interned_strings_buffer`, `opcache.max_accelerated_files`).
- Confirm CLI workers or batch scripts inherit the same OPcache settings when appropriate.

## Recommendations
- Wrap data streaming patterns in reusable helpers to keep teams from reintroducing memory-heavy approaches.
- Use generators (`yield`) for pipelines that transform large datasets.
- Profile using `memory_get_usage()`, Blackfire, Xdebug, or similar tools to quantify improvements.
- Monitor OPcache hit ratios and memory consumption to adjust configuration before saturation.
- Consider using `Symfony\Component\Process\Process` for external commands to control memory usage of child processes.

## Positive Signals
- Presence of iterators (`Generator`, `Yield`, `SplFileObject`) instead of bulk array loading.
- Data access layers using limit/offset pagination or chunked processing.
- Configuration files enabling OPcache with tuned cache sizes committed alongside application code.

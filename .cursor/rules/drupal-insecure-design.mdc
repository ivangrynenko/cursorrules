---
description: Detect and prevent insecure design patterns in Drupal as defined in OWASP Top 10:2021-A04
globs: *.php, *.install, *.module, *.inc, *.theme, *.yml, *.info
alwaysApply: false
---
# Drupal Insecure Design Security Standards (OWASP A04:2021)

This rule enforces security best practices to prevent insecure design vulnerabilities in Drupal applications, as defined in OWASP Top 10:2021-A04.

> Priority: high Â· Version: 1.0

## Applies To
- `*.php`
- `*.install`
- `*.module`
- `*.inc`
- `*.theme`
- `*.yml`
- `*.info`

## Trigger Conditions
- Files matching pattern `\.(php|inc|module|install|theme|info\.yml)$`
- Paths matching `(modules|themes|profiles)/custom`

## Required Checks

- Permissions should follow Drupal naming patterns (verb + object) and be specific. Avoid overly broad permissions.
- Consider moving business logic rules to configuration to allow for proper adjustment without code changes.
- Avoid ad hoc sanitization. Use Drupal's built-in sanitization tools: t(), Xss::filter(), etc.
- Follow separation of concerns. Move database logic to services or repositories, not in controllers.
- Avoid unconditional access grants. Implement proper conditional checks based on roles, permissions, or entity ownership.
- Avoid custom session management. Use Drupal's session handling system and services.
- Excessive static service calls indicate poor dependency injection. Use proper service injection.
- Avoid custom authentication. Use Drupal's built-in authentication system and services.
- Database schemas should enforce data integrity with proper constraints (NOT NULL, length, etc.).
- Security-related configuration should default to secure settings (opt-in for potentially insecure features).

## Recommendations

**Drupal Secure Design Best Practices:**

1. **Secure Architecture Principles:**
   - Follow the principle of least privilege for all user roles and permissions
   - Implement defense in depth with multiple security layers
   - Use Drupal's entity/field API for structured data instead of custom tables
   - Employ service-oriented architecture with proper dependency injection
   - Follow Drupal coding standards to leverage community security expertise

2. **Permission System Design:**
   - Design granular permissions following the verb+object pattern
   - Avoid creating omnipotent permissions that grant excessive access
   - Use context-aware access systems like Entity Access or Node Grants
   - Consider record-based and field-based access for better control
   - Document permission architecture and security implications

3. **Module Architecture:**
   - Separate concerns into appropriate services
   - Use hooks judiciously and document security implications
   - Implement proper validation and sanitization layers
   - Design APIs with security in mind from the start
   - Provide secure default configurations

4. **Data Modeling Security:**
   - Implement appropriate validation constraints on entity fields
   - Design schema definitions with integrity constraints
   - Use appropriate field types for sensitive data
   - Implement field-level access control when needed
   - Consider encryption for sensitive stored data

5. **Error Handling and Logging:**
   - Design contextual error messages (detailed for admins, general for users)
   - Implement appropriate logging for security events
   - Avoid exposing sensitive data in error messages
   - Design fault-tolerant systems that fail securely
   - Include appropriate transaction management

## Validation

- Using proper dependency injection pattern.
- Providing configuration schema for validation.
- Following permission naming conventions.
- Using dedicated access control handlers for entities.

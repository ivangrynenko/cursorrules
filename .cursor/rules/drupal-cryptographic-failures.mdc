---
description: Detect and prevent cryptographic failures in Drupal as defined in OWASP Top 10:2021-A02
globs: *.php, *.install, *.module, *.inc, *.theme
alwaysApply: false
---
# Drupal Cryptographic Failures Security Standards (OWASP A02:2021)

This rule enforces security best practices to prevent cryptographic failures in Drupal applications, as defined in OWASP Top 10:2021-A02.

> Priority: high Â· Version: 1.0

## Applies To
- `*.php`
- `*.install`
- `*.module`
- `*.inc`
- `*.theme`

## Trigger Conditions
- Files matching pattern `\.(php|inc|module|install|theme)$`
- Paths matching `(modules|themes|profiles|core)/.*`

## Required Checks

- Weak hash algorithm detected. Use password_hash() for passwords or hash('sha256'/'sha512') for other data.
- Hardcoded credentials or sensitive keys detected. Use Drupal's State API, key module, or environment variables.
- Never store plaintext passwords. Drupal handles password hashing internally.
- Consider encrypting sensitive file contents using Drupal's encryption API or PHP's openssl functions.
- Sensitive data in settings.php should be moved to environment variables or settings.local.php.
- Insecure random number generation. Use random_bytes() or random_int() for cryptographic purposes.
- Ensure HTTPS is enforced for cached pages containing sensitive information.
- Consider using field encryption for sensitive data fields.
- Avoid custom session handling. Use Drupal's session management services.
- API tokens should include expiration time or rotation mechanism.

## Recommendations

**Drupal Cryptographic Security Best Practices:**

1. **Secure Data Storage:**
   - Use Drupal's Key module for storing encryption keys
   - Store sensitive configuration in environment variables or settings.local.php
   - Use Drupal's State API for non-configuration sensitive data
   - Never store plaintext sensitive information in the database

2. **Encryption and Hashing:**
   - Use Drupal's password hashing system, which uses password_hash() internally
   - For non-password data hashing, use SHA-256 or SHA-512
   - Use the Encrypt module or PHP's openssl_encrypt() with proper algorithms (AES-256-GCM)
   - Always use proper salting techniques

3. **Communication Security:**
   - Enforce HTTPS site-wide using settings.php configuration
   - Use secure cookies (secure, HttpOnly, SameSite)
   - Implement proper Content-Security-Policy headers
   - Use TLS 1.2+ for all connections

4. **API Security:**
   - Use OAuth or JWT with proper signature verification
   - Implement token expiration and rotation
   - Use HMAC for API request signatures when appropriate
   - Never expose internal encryption keys through APIs

5. **Configuration Best Practices:**
   - Regularly rotate encryption keys and credentials
   - Implement secure key storage using key management services
   - Monitor and log cryptographic operations 
   - Maintain an inventory of cryptographic algorithms in use

## Validation

- Using Drupal's password system correctly.
- Using secure random generation methods.
- Using environment variables or local settings correctly.
- Using proper encryption methods.

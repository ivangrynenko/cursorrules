---
description: Detect and prevent security misconfigurations in Python applications as defined in OWASP Top 10:2021-A05
globs: *.py, *.ini, *.cfg, *.yml, *.yaml, *.json, *.toml
alwaysApply: false
---
# Python Security Misconfiguration Standards (OWASP A05:2021)

This rule enforces security best practices to prevent security misconfigurations in Python applications, as defined in OWASP Top 10:2021-A05.

> Priority: high Â· Version: 1.0

## Applies To
- `*.py`
- `*.ini`
- `*.cfg`
- `*.yml`
- `*.yaml`
- `*.json`
- `*.toml`

## Trigger Conditions
- Files matching pattern `\.(py|ini|cfg|yml|yaml|json|toml)$`
- Paths matching `.*`

## Required Checks

- Debug mode appears to be enabled. This should be disabled in production environments as it can expose sensitive information.
- Insecure cookie configuration detected. Set SESSION_COOKIE_SECURE to True in production environments.
- CSRF protection appears to be disabled. Enable CSRF protection to prevent cross-site request forgery attacks.
- Overly permissive CORS configuration detected. Restrict CORS to specific origins rather than allowing all origins.
- Default or potentially weak secret key detected. Use a strong, randomly generated secret key and store it securely.
- Exception propagation in debug mode is enabled. This can expose sensitive information in error messages.
- SSL redirection appears to be disabled. Enable SSL redirection to ensure secure communications.
- HTTP Strict Transport Security (HSTS) appears to be disabled. Enable HSTS to enforce secure communications.
- Potentially sensitive endpoint exposed without access controls. Ensure proper authentication and authorization for administrative endpoints.
- Default or weak credentials detected. Never use default or easily guessable credentials in any environment.
- Overly permissive file permissions detected. Use the principle of least privilege for file permissions.
- Endpoints that may expose version information detected. Ensure these endpoints don't reveal sensitive details about your application.
- Potentially insecure deserialization detected. Use safer alternatives like yaml.safe_load() or validate input before deserialization.
- HTTP request without timeout setting detected. Always set timeouts for HTTP requests to prevent denial of service.
- Insecure upload directory detected. Use a properly secured directory for file uploads, not temporary directories.

## Recommendations

**Python Security Configuration Best Practices:**

1. **Environment-Specific Configuration:**
   - Use different configurations for development, testing, and production
   - Never enable debug mode in production
   - Example with environment variables:
     ```python
     import os
     
     DEBUG = os.environ.get('DEBUG', 'False') == 'True'
     SECRET_KEY = os.environ.get('SECRET_KEY')
     ```

2. **Secure Cookie Configuration:**
   - Enable secure cookies in production
   - Set appropriate cookie flags
   - Example for Django:
     ```python
     SESSION_COOKIE_SECURE = True
     SESSION_COOKIE_HTTPONLY = True
     SESSION_COOKIE_SAMESITE = 'Lax'
     CSRF_COOKIE_SECURE = True
     CSRF_COOKIE_HTTPONLY = True
     ```
   - Example for Flask:
     ```python
     app.config.update(
         SESSION_COOKIE_SECURE=True,
         SESSION_COOKIE_HTTPONLY=True,
         SESSION_COOKIE_SAMESITE='Lax',
         PERMANENT_SESSION_LIFETIME=timedelta(hours=1)
     )
     ```

3. **Security Headers:**
   - Implement HTTP security headers
   - Example with Flask-Talisman:
     ```python
     from flask_talisman import Talisman
     
     talisman = Talisman(
         app,
         content_security_policy={
             'default-src': "'self'",
             'script-src': "'self'"
         },
         strict_transport_security=True,
         strict_transport_security_max_age=31536000,
         frame_options='DENY'
     )
     ```
   - Example for Django:
     ```python
     SECURE_HSTS_SECONDS = 31536000
     SECURE_HSTS_INCLUDE_SUBDOMAINS = True
     SECURE_HSTS_PRELOAD = True
     SECURE_CONTENT_TYPE_NOSNIFF = True
     SECURE_BROWSER_XSS_FILTER = True
     X_FRAME_OPTIONS = 'DENY'
     ```

4. **CORS Configuration:**
   - Restrict CORS to specific origins
   - Example with Flask-CORS:
     ```python
     from flask_cors import CORS
     
     CORS(app, resources={r"/api/*": {"origins": "https://example.com"}})
     ```
   - Example for Django:
     ```python
     CORS_ALLOWED_ORIGINS = [
         "https://example.com",
         "https://sub.example.com",
     ]
     CORS_ALLOW_CREDENTIALS = True
     ```

5. **Secret Management:**
   - Use environment variables or secure vaults for secrets
   - Generate strong random secrets
   - Example:
     ```python
     import secrets
     
     # Generate a secure random secret key
     secret_key = secrets.token_hex(32)
     ```

6. **Error Handling:**
   - Use custom error handlers to prevent information leakage
   - Example for Flask:
     ```python
     @app.errorhandler(Exception)
     def handle_exception(e):
         # Log the error
         app.logger.error(f"Unhandled exception: {str(e)}")
         # Return a generic error message
         return jsonify({"error": "An unexpected error occurred"}), 500
     ```

7. **Secure File Uploads:**
   - Validate file types and sizes
   - Store uploaded files outside the web root
   - Use secure permissions
   - Example:
     ```python
     import os
     from werkzeug.utils import secure_filename
     
     UPLOAD_FOLDER = '/path/to/secure/location'
     ALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg'}
     
     app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
     app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB limit
     
     def allowed_file(filename):
         return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS
     ```

8. **Dependency Management:**
   - Regularly update dependencies
   - Use tools like safety or dependabot
   - Pin dependency versions
   - Example requirements.txt:
     ```
     Flask==2.0.1
     Werkzeug==2.0.1
     ```

9. **Timeout Configuration:**
   - Set timeouts for all external service calls
   - Example:
     ```python
     import requests
     
     response = requests.get('https://api.example.com', timeout=(3.05, 27))
     ```

10. **Secure Deserialization:**
    - Use safe alternatives for deserialization
    - Validate input before deserialization
    - Example:
      ```python
      import yaml
      
      # Use safe_load instead of load
      data = yaml.safe_load(yaml_string)
      ```

## Validation

- Using environment-specific or secure debug configuration.
- Using secure cookie configuration.
- Implementing security headers.
- Using restricted CORS configuration.

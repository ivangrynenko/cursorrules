---
description: Docker Compose standards Rule
globs: 
alwaysApply: false
---
> Priority: high Â· Version: 1.0

## Trigger Conditions
- Filter `file_name` matching `docker-compose\.ya?ml$`
- Events `(file_create|file_modify)`

## Hard Stops

- The 'version' field is deprecated in Docker Compose files. Compose files are now version-less by default.
- Inconsistent indentation detected. Use 2 spaces for indentation.
- The 'links' key is deprecated. Use networks and service names for inter-service communication.
- Specify an explicit image tag to ensure consistency.
- Running services in privileged mode is discouraged for security reasons.
- Define resource limits for each service to prevent resource exhaustion.

## Recommendations

To adhere to Docker Compose best practices:

1. **Omit the 'version' field**: Compose files are version-less by default.
   ```yaml
   services:
     web:
       image: nginx
   ```

2. **Use consistent indentation**: Use 2 spaces for indentation.
   ```yaml
   services:
     web:
       image: nginx
   ```

3. **Avoid 'links' key**: Use networks and service names for service communication.
   ```yaml
   services:
     web:
       image: nginx
       networks:
         - my-network
     db:
       image: mysql
       networks:
         - my-network
   networks:
     my-network:
   ```

4. **Specify explicit image tags**: Prevent unintended updates by defining image tags.
   ```yaml
   services:
     web:
       image: nginx:1.21.0
   ```

5. **Avoid privileged mode**: Do not use 'privileged: true'. Grant specific capabilities if necessary.
   ```yaml
   services:
     web:
       image: nginx
       cap_add:
         - NET_ADMIN
   ```

6. **Define resource limits**: Prevent services from consuming excessive resources.
   ```yaml
   services:
     web:
       image: nginx
       deploy:
         resources:
           limits:
             cpus: '0.50'
             memory: '512M'
   ```

Implementing these practices ensures secure, maintainable, and consistent Docker Compose configurations.

## Examples
### Example 1
```
version: '3'
services:
  web:
    image: nginx
    links:
      - db
    privileged: true
  db:
    image: mysql
```
Outcome: services:
  web:
    image: nginx:1.21.0
    networks:
      - my-network
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: '512M'
  db:
    image: mysql:5.7
    networks:
      - my-network
networks:
  my-network:


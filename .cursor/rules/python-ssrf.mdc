---
description: Detect and prevent Server-Side Request Forgery (SSRF) vulnerabilities in Python applications as defined in OWASP Top 10:2021-A10
globs: *.py
alwaysApply: false
---
# Python Server-Side Request Forgery (SSRF) Safeguards

This rule provides review checkpoints to avoid SSRF vulnerabilities when Python code makes outbound network calls on behalf of a user or downstream system.

> Priority: high Â· Version: 1.0

## Applies To
- `*.py`

## Trigger Conditions
- HTTP clients such as `requests`, `urllib`, `aiohttp`, `httpx`, `boto3`, or custom fetch utilities.
- Code paths that pass user-controlled URLs, hostnames, IP addresses, or protocols into outbound requests.
- Services acting as proxies, webhooks, image fetchers, or metadata retrievers.

## Required Checks
- Validate destination schemes and hosts before executing outbound requests; prefer allowlists over blocklists.
- Block or rewrite requests that resolve to loopback, link-local, or private network ranges (e.g. 127.0.0.0/8, ::1, 169.254.0.0/16, 10.0.0.0/8, 192.168.0.0/16).
- Disable automatic redirects, or re-validate redirect targets, when relaying user-provided URLs.
- Ensure headers such as `Host`, `X-Forwarded-For`, and authentication tokens cannot be overridden by external input.
- Reject or sanitise non-HTTP schemes (`file://`, `ftp://`, `gopher://`, etc.) unless explicitly required.

## Recommendations
- Normalize input with `urllib.parse`, `yarl.URL`, or equivalent helpers before validation.
- Resolve hostnames with `socket.getaddrinfo` or `ipaddress.ip_address` to enforce subnet allowlists.
- Wrap outbound calls behind shared helpers that centralise validation, logging, and timeout defaults.
- Combine application checks with infrastructure controls (egress allowlists, VPC service controls, IMDSv2 tokens).
- Record security telemetry for SSRF-prone endpoints (requested host, caller, decision outcome).
- Add tests that cover malicious targets (internal IPs, metadata endpoints, protocol smuggling).

## Positive Signals
- Presence of helper functions such as `sanitize_url`, `validate_external_url`, or allowlisted hostname checks.
- Use of CIDR comparisons or allowlist configuration before performing network requests.
- Explicit configuration-driven lists of permitted domains or services.
- Security unit tests or integration tests asserting blocked behaviour for sensitive hosts.

## References
- OWASP SSRF Prevention Cheat Sheet
- Python `ipaddress` and `urllib.parse` documentation
- Cloud provider guidance for protecting metadata services

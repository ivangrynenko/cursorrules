diff --git a/install.php b/install.php
index 424df6f..04e00b0 100644
--- a/install.php
+++ b/install.php
@@ -1,7 +1,4 @@
 <?php
-
-declare(strict_types=1);
-
 /**
  * Cursor Rules Installer Script.
  * 
@@ -20,6 +17,13 @@ declare(strict_types=1);
  * --yes, -y: Automatically confirm all prompts
  */
 
+declare(strict_types=1);
+
+// Define constants.
+define('CURSOR_RULES_VERSION', '1.0.2');
+define('CURSOR_RULES_DIR', '.cursor/rules');
+define('CURSOR_DIR', '.cursor');
+
 const COLORS = [
     'red' => "\033[0;31m",
     'green' => "\033[0;32m",
@@ -53,935 +57,743 @@ const TAG_PRESETS = [
     'drupal-owasp' => 'framework:drupal standard:owasp-top10',
 ];
 
-// Parse command line options
-$options = getopt('wpachyqt:', [
-    'web-stack',
-    'python',
-    'all',
-    'core',
-    'custom',
-    'help',
-    'yes',
-    'quiet',
-    'tags:',
-    'tag-preset:',
-    'ignore-files:',
-]);
-
-// Default settings
-$autoConfirm = false;
-$quietMode = false;
-$installMode = 'interactive';
-$tagExpression = '';
-$tagPreset = '';
-$installIgnoreFiles = 'yes';
-
-// Process options
-if (isset($options['h']) || isset($options['help'])) {
-    displayHelp();
-    exit(0);
-}
-
-if (isset($options['y']) || isset($options['yes'])) {
-    $autoConfirm = true;
-}
-
-if (isset($options['q']) || isset($options['quiet'])) {
-    $quietMode = true;
-}
-
-// Check for ignore files option
-if (isset($options['ignore-files'])) {
-    $ignoreFilesOption = strtolower($options['ignore-files']);
-    if ($ignoreFilesOption === 'yes' || $ignoreFilesOption === 'y') {
-        $installIgnoreFiles = 'yes';
-    } elseif ($ignoreFilesOption === 'no' || $ignoreFilesOption === 'n') {
-        $installIgnoreFiles = 'no';
-    } elseif ($ignoreFilesOption === 'ask' || $ignoreFilesOption === 'a') {
-        $installIgnoreFiles = 'ask';
-    } else {
-        println(colorize("Warning: Invalid value for --ignore-files. Using default (ask).", 'yellow'));
+// Main function to install cursor rules.
+function install_cursor_rules(array $options = []): bool {
+  // Default options.
+  $default_options = [
+    'debug' => false,
+    'copy_only' => false,
+    'destination' => CURSOR_RULES_DIR,
+    'web_stack' => false,
+    'python' => false,
+    'javascript' => false,
+    'tags' => false,
+    'tag-preset' => false,
+    'ignore-files' => 'yes',
+    'all' => false,
+    'core' => false,
+    'yes' => false,
+    'help' => false,
+  ];
+
+  // Merge options.
+  $options = array_merge($default_options, $options);
+  
+  // Show help if requested.
+  if ($options['help']) {
+    show_help();
+    return true;
+  }
+  
+  // Check for conflicting options.
+  $option_count = 0;
+  if ($options['web_stack']) $option_count++;
+  if ($options['python']) $option_count++;
+  if ($options['javascript']) $option_count++;
+  if ($options['all']) $option_count++;
+  if ($options['core']) $option_count++;
+  if ($options['tags']) $option_count++;
+  if ($options['tag-preset']) $option_count++;
+  
+  if ($option_count > 1) {
+    echo "Error: Conflicting options. Please choose only one installation type.\n";
+    echo "Run with --help for usage information.\n";
+    return false;
+  }
+  
+  // Debug mode.
+  if ($options['debug']) {
+    echo "Debug mode enabled\n";
+    echo "Options: " . print_r($options, true) . "\n";
+  }
+  
+  // Create destination directory if it doesn't exist.
+  if (!is_dir($options['destination'])) {
+    if (!mkdir($options['destination'], 0755, true)) {
+      echo "Error: Failed to create directory: {$options['destination']}\n";
+      return false;
     }
-}
-
-// Check for tag-based filtering
-if (isset($options['tags'])) {
-    $tagExpression = $options['tags'];
-    $installMode = 'tags';
-}
-
-if (isset($options['t'])) {
-    $tagExpression = $options['t'];
-    $installMode = 'tags';
-}
-
-if (isset($options['tag-preset'])) {
-    $tagPreset = $options['tag-preset'];
-    if (isset(TAG_PRESETS[$tagPreset])) {
-        $tagExpression = TAG_PRESETS[$tagPreset];
-        $installMode = 'tags';
-    } else {
-        println(colorize("Error: Unknown tag preset '{$tagPreset}'. Available presets: " . implode(', ', array_keys(TAG_PRESETS)), 'red'));
-        exit(1);
+    
+    if ($options['debug']) {
+      echo "Created directory: {$options['destination']}\n";
     }
-}
-
-// Check for conflicting installation options
-$installOptions = 0;
-if (isset($options['w']) || isset($options['web-stack'])) {
-    $installMode = 'web-stack';
-    $installOptions++;
-}
-
-if (isset($options['p']) || isset($options['python'])) {
-    $installMode = 'python';
-    $installOptions++;
-}
-
-if (isset($options['a']) || isset($options['all'])) {
-    $installMode = 'all';
-    $installOptions++;
-}
-
-if (isset($options['c']) || isset($options['core'])) {
-    $installMode = 'core';
-    $installOptions++;
-}
-
-if (isset($options['custom'])) {
-    $installMode = 'custom';
-    $installOptions++;
-}
-
-// Check for conflicting installation options
-if ($installOptions > 1 || ($installOptions === 1 && $installMode === 'tags')) {
-    println(colorize("Error: Conflicting installation options provided. Please specify only one of: --web-stack, --python, --all, --core, --custom, --tags", 'red'));
-    displayHelp();
-    exit(1);
-}
-
-function displayHelp() {
-    println("Cursor Rules Installer");
-    println("======================");
-    println();
-    println("Usage: php install.php [options]");
-    println();
-    println("Options:");
-    println("  --web-stack, -w       Install core, web, and Drupal rules");
-    println("  --python, -p          Install core and Python rules");
-    println("  --all, -a             Install all rule sets");
-    println("  --core, -c            Install only core rules");
-    println("  --custom              Enable selective installation (interactive)");
-    println("  --tags, -t <query>    Filter rules by tag expression (e.g., \"language:php category:security\")");
-    println("  --tag-preset <name>   Use a predefined tag preset (web, frontend, drupal, react, vue, python, security, owasp, a11y)");
-    println("  --ignore-files <opt>  Control installation of .cursorignore files (yes, no, ask), default's to yes");
-    println("  --help, -h            Display this help information");
-    println("  --quiet, -q           Suppress verbose output");
-    println("  --yes, -y             Automatically confirm all prompts");
-    println();
-    println("Tag Expression Examples:");
-    println("  \"language:php\"                     - All PHP rules");
-    println("  \"language:javascript category:security\" - JavaScript security rules");
-    println("  \"framework:drupal standard:owasp-top10\" - Drupal OWASP rules");
-    println("  \"language:python OR language:php\"  - All Python or PHP rules");
-    println();
-    println("Available Tag Presets:");
-    foreach (TAG_PRESETS as $preset => $expression) {
-        println("  {$preset}: {$expression}");
+  }
+  
+  // Create .cursor directory if it doesn't exist.
+  if (!is_dir(CURSOR_DIR)) {
+    if (!mkdir(CURSOR_DIR, 0755, true)) {
+      echo "Error: Failed to create directory: " . CURSOR_DIR . "\n";
+      return false;
     }
-    println();
-    println("Examples:");
-    println("  php install.php --web-stack --yes");
-    println("  php install.php -p -q");
-    println("  php install.php --tags \"language:javascript framework:react\"");
-    println("  php install.php --tag-preset security");
-    println("  php install.php --ignore-files ask");
-    println();
-}
-
-function colorize(string $message, string $color): string {
-    global $quietMode;
-    if ($quietMode) {
-        return $message;
+    
+    if ($options['debug']) {
+      echo "Created directory: " . CURSOR_DIR . "\n";
     }
-    return COLORS[$color] . $message . COLORS['reset'];
-}
-
-function println(string $message = ''): void {
-    global $quietMode;
-    if (!$quietMode || empty($message)) {
-        echo $message . PHP_EOL;
+  }
+  
+  // Create UPDATE.md file in .cursor directory.
+  $update_file = CURSOR_DIR . '/UPDATE.md';
+  if (!file_exists($update_file)) {
+    file_put_contents($update_file, "Version " . CURSOR_RULES_VERSION);
+    if ($options['debug']) {
+      echo "Created file: $update_file\n";
     }
-}
-
-function prompt(string $message, string $default = ''): string {
-    global $autoConfirm;
+  }
+  
+  // Define rule files by category.
+  $core_rules = [
+    'cursor-rules.mdc',
+    'improve-cursorrules-efficiency.mdc',
+    'git-commit-standards.mdc',
+    'readme-maintenance-standards.mdc',
+    'github-actions-standards.mdc',
+    'testing-guidelines.mdc',
+  ];
+  
+  $web_stack_rules = [
+    'accessibility-standards.mdc',
+    'api-standards.mdc',
+    'build-optimization.mdc',
+    'javascript-performance.mdc',
+    'javascript-standards.mdc',
+    'node-dependencies.mdc',
+    'react-patterns.mdc',
+    'tailwind-standards.mdc',
+    'third-party-integration.mdc',
+    'vue-best-practices.mdc',
+    'security-practices.mdc',
+    'php-drupal-best-practices.mdc',
+    'drupal-database-standards.mdc',
+    'govcms-saas.mdc',
+    'drupal-broken-access-control.mdc',
+    'drupal-cryptographic-failures.mdc',
+    'drupal-injection.mdc',
+    'drupal-insecure-design.mdc',
+    'drupal-security-misconfiguration.mdc',
+    'drupal-vulnerable-components.mdc',
+    'drupal-authentication-failures.mdc',
+    'drupal-integrity-failures.mdc',
+    'drupal-logging-failures.mdc',
+    'drupal-ssrf.mdc',
+  ];
+  
+  $python_rules = [
+    'python-broken-access-control.mdc',
+    'python-cryptographic-failures.mdc',
+    'python-injection.mdc',
+    'python-insecure-design.mdc',
+    'python-security-misconfiguration.mdc',
+    'python-vulnerable-outdated-components.mdc',
+    'python-authentication-failures.mdc',
+    'python-integrity-failures.mdc',
+    'python-logging-monitoring-failures.mdc',
+    'python-ssrf.mdc',
+  ];
+  
+  $javascript_rules = [
+    'javascript-broken-access-control.mdc',
+    'javascript-cryptographic-failures.mdc',
+    'javascript-injection.mdc',
+    'javascript-insecure-design.mdc',
+    'javascript-security-misconfiguration.mdc',
+    'javascript-vulnerable-outdated-components.mdc',
+    'javascript-identification-authentication-failures.mdc',
+    'javascript-software-data-integrity-failures.mdc',
+    'javascript-security-logging-monitoring-failures.mdc',
+    'javascript-server-side-request-forgery.mdc',
+  ];
+  
+  // Determine which rules to install.
+  $rules_to_install = [];
+  
+  // Check if STDIN is available for interactive input
+  $stdin_available = function_exists('stream_isatty') ? stream_isatty(STDIN) : false;
+  
+  // Interactive mode if no specific option is selected and not in auto-yes mode and STDIN is available
+  if ($option_count === 0 && !$options['yes'] && $stdin_available) {
+    echo "Welcome to Cursor Rules Installer v" . CURSOR_RULES_VERSION . "\n\n";
+    echo "Please select which rules to install:\n";
+    echo "1) Core rules only\n";
+    echo "2) Web stack rules (PHP, Drupal, JavaScript, etc.)\n";
+    echo "3) Python rules\n";
+    echo "4) JavaScript rules\n";
+    echo "5) All rules\n";
+    echo "6) Exit\n";
     
-    // If auto-confirm is enabled, return the default
-    if ($autoConfirm) {
-        return $default;
+    $valid_choice = false;
+    while (!$valid_choice) {
+      echo "\nEnter your choice (1-5): ";
+      $choice = trim(fgets(STDIN));
+      
+      switch ($choice) {
+        case '1':
+          $rules_to_install = $core_rules;
+          $valid_choice = true;
+          echo "Installing core rules...\n";
+          break;
+        case '2':
+          $rules_to_install = array_merge($core_rules, $web_stack_rules, $javascript_rules);
+          $valid_choice = true;
+          echo "Installing web stack rules...\n";
+          if ($options['debug']) {
+            echo "Selected " . count($rules_to_install) . " rules to install (" . count($core_rules) . " core + " . count($web_stack_rules) . " web stack + " . count($javascript_rules) . " JavaScript OWASP)\n";
+          }
+          break;
+        case '3':
+          $rules_to_install = array_merge($core_rules, $python_rules);
+          $valid_choice = true;
+          echo "Installing Python rules...\n";
+          if ($options['debug']) {
+            echo "Selected " . count($rules_to_install) . " rules to install (" . count($core_rules) . " core + " . count($python_rules) . " python)\n";
+          }
+          break;
+        case '4':
+          $rules_to_install = array_merge($core_rules, $javascript_rules);
+          $valid_choice = true;
+          echo "Installing JavaScript rules...\n";
+          if ($options['debug']) {
+            echo "Selected " . count($rules_to_install) . " rules to install (" . count($core_rules) . " core + " . count($javascript_rules) . " JavaScript)\n";
+          }
+          break;
+        case '5':
+          $rules_to_install = array_merge($core_rules, $web_stack_rules, $python_rules, $javascript_rules);
+          $valid_choice = true;
+          echo "Installing all rules...\n";
+          if ($options['debug']) {
+            echo "Selected " . count($rules_to_install) . " rules to install (" . count($core_rules) . " core + " . count($web_stack_rules) . " web stack + " . count($python_rules) . " python + " . count($javascript_rules) . " JavaScript)\n";
+          }
+          break;
+        case '6':
+          echo "Installation cancelled.\n";
+          return true;
+        default:
+          echo "Invalid choice. Please enter a number between 1 and 5.\n";
+      }
     }
+  } else if ($option_count === 0 && !$stdin_available) {
+    // If STDIN is not available (e.g., when piped through curl), default to core rules
+    echo "⚠️ Interactive mode not available when using curl piping (STDIN is already in use).\n";
+    echo "Defaulting to core rules installation.\n\n";
+    echo "For interactive installation with prompts, use the two-step process instead:\n";
+    echo "1. curl -s https://raw.githubusercontent.com/ivangrynenko/cursor-rules/main/install.php -o install.php\n";
+    echo "2. php install.php\n\n";
+    echo "For specific options without interactive mode, use:\n";
+    echo "curl -s https://raw.githubusercontent.com/ivangrynenko/cursor-rules/main/install.php | php -- --help\n\n";
+    $rules_to_install = $core_rules;
+  } else if ($options['tags'] || $options['tag-preset']) {
+    // Tags-based filtering will be handled during rule installation
+    $rules_to_install = array_merge($core_rules, $web_stack_rules, $python_rules, $javascript_rules);
+  } else if ($options['all']) {
+    $rules_to_install = array_merge($core_rules, $web_stack_rules, $python_rules, $javascript_rules);
+  } elseif ($options['web_stack']) {
+    $rules_to_install = array_merge($core_rules, $web_stack_rules, $javascript_rules);
+  } elseif ($options['python']) {
+    $rules_to_install = array_merge($core_rules, $python_rules);
+  } elseif ($options['core']) {
+    $rules_to_install = $core_rules;
+  } else {
+    // Default to core rules if no option specified and in auto-yes mode.
+    $rules_to_install = $core_rules;
+  }
+  
+  // Find the source directory containing the rule files
+  $script_dir = dirname(__FILE__);
+  
+  // Define a function to check if a directory contains at least some of the rule files
+  function is_valid_source_dir($dir, $rule_files, $min_files = 3) {
+    global $options;
+    $found_files = 0;
     
-    // Check if input is piped
-    $isPiped = !posix_isatty(STDIN);
-    if ($isPiped) {
-        return $default;
+    if (isset($options['debug']) && $options['debug']) {
+      echo "Checking if directory is valid source: $dir\n";
+      echo "Looking for at least $min_files of " . count($rule_files) . " rule files\n";
     }
     
-    echo $message . ($default ? " [{$default}]" : '') . ': ';
-    $input = fgets(STDIN);
-    if ($input === false) {
-        return $default;
+    foreach ($rule_files as $file) {
+      if (file_exists($dir . '/' . $file)) {
+        $found_files++;
+        if (isset($options['debug']) && $options['debug']) {
+          echo "Found file: $file\n";
+        }
+        
+        if ($found_files >= $min_files) {
+          if (isset($options['debug']) && $options['debug']) {
+            echo "Directory is valid: $dir (found $found_files files)\n";
+          }
+          
+          return $dir;
+        }
+      }
     }
-    return trim($input) ?: $default;
-}
-
-function downloadFile(string $url, string $destination): bool {
-    $ch = curl_init($url);
-    if ($ch === FALSE) {
-        return FALSE;
+    
+    if (isset($options['debug']) && $options['debug']) {
+      echo "Directory is not valid: $dir (found only $found_files files)\n";
     }
-
-    $fp = fopen($destination, 'w');
-    if ($fp === FALSE) {
-        curl_close($ch);
-        return FALSE;
+    
+    return null;
+  }
+  
+  // Add debug output for rules to install
+  if ($options['debug']) {
+    echo "\nRules to install (" . count($rules_to_install) . " total):\n";
+    foreach ($rules_to_install as $index => $rule) {
+      echo ($index + 1) . ". $rule\n";
     }
-
-    curl_setopt($ch, CURLOPT_FILE, $fp);
-    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, TRUE);
-    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
-
-    $success = curl_exec($ch);
+    echo "\n";
+  }
+  
+  $possible_source_dirs = [
+    // Try current directory first
+    getcwd() . '/.cursor/rules',
     
-    curl_close($ch);
-    fclose($fp);
-
-    return $success !== FALSE;
-}
-
-/**
- * Extract tags from an MDC file.
- * 
- * @param string $content The content of the MDC file
- * @return array Array of tags found in the file
- */
-function extractTags(string $content): array {
-    $tags = [];
+    // Try script directory
+    $script_dir . '/.cursor/rules',
     
-    // Look for metadata section with tags
-    if (preg_match('/metadata:\s*\n(.*?)(?:\n\w|$)/s', $content, $matches)) {
-        $metadataSection = $matches[1];
-        
-        // Extract tags section
-        if (preg_match('/tags:\s*\n(.*?)(?:\n\w|$)/s', $metadataSection, $tagMatches)) {
-            $tagsSection = $tagMatches[1];
-            
-            // Extract individual tags
-            preg_match_all('/^\s*-\s*([a-z0-9_-]+:[a-z0-9_-]+)\s*$/m', $tagsSection, $tagItems);
-            if (!empty($tagItems[1])) {
-                $tags = $tagItems[1];
-            }
-        }
-    }
+    // Try parent directories (up to 3 levels)
+    dirname($script_dir) . '/.cursor/rules',
+    dirname(dirname($script_dir)) . '/.cursor/rules',
+    dirname(dirname(dirname($script_dir))) . '/.cursor/rules',
     
-    return $tags;
-}
-
-/**
- * Evaluate if a set of tags matches a tag expression.
- * 
- * @param array $tags Array of tags to check
- * @param string $expression Tag expression to evaluate
- * @return bool True if tags match the expression
- */
-function matchesTagExpression(array $tags, string $expression): bool {
-    // Split by OR operator
-    $orParts = explode(' OR ', $expression);
+    // Try relative paths from common locations
+    getcwd() . '/../.cursor/rules',
+    getcwd() . '/../../.cursor/rules',
+    $script_dir . '/../.cursor/rules',
+    $script_dir . '/../../.cursor/rules',
+  ];
+  
+  // If we're in a test environment, try to find the repository root
+  if (strpos($script_dir, '.tests') !== false || strpos(getcwd(), '.tests') !== false) {
+    // We're likely in a test directory, so try to find the repository root
+    $test_paths = [
+      dirname(dirname($script_dir)) . '/.cursor/rules', // From .tests/temp/test_dir/install.php
+      dirname(dirname(dirname($script_dir))) . '/.cursor/rules', // One level deeper
+      dirname(dirname(dirname(dirname($script_dir)))) . '/.cursor/rules', // Two levels deeper
+    ];
     
-    foreach ($orParts as $orPart) {
-        // Split by AND operator (space)
-        $andParts = array_filter(preg_split('/\s+/', trim($orPart)));
-        
-        // Check if all AND conditions match
-        $allAndMatch = true;
-        foreach ($andParts as $andTag) {
-            if (!in_array(trim($andTag), $tags)) {
-                $allAndMatch = false;
-                break;
-            }
-        }
-        
-        // If any OR condition is fully satisfied, return true
-        if ($allAndMatch) {
-            return true;
-        }
+    // Add test paths at the beginning for priority
+    $possible_source_dirs = array_merge($test_paths, $possible_source_dirs);
+  }
+  
+  // Try to download rules from GitHub if no local source is found
+  $github_source = 'https://raw.githubusercontent.com/ivangrynenko/cursor-rules/main/.cursor/rules/';
+  $temp_dir = sys_get_temp_dir() . '/cursor-rules-' . uniqid();
+  
+  // Find a valid source directory
+  $source_dir = null;
+  foreach ($possible_source_dirs as $dir) {
+    $source_dir = is_valid_source_dir($dir, $rules_to_install);
+    if ($source_dir !== null) {
+      if ($options['debug']) {
+        echo "Found source directory: $source_dir\n";
+      }
+      break;
+    }
+  }
+  
+  // Final check to ensure we have a valid source directory
+  if ($source_dir === null) {
+    echo "Error: Could not find source directory containing rule files.\n";
+    if ($options['debug']) {
+      echo "Tried the following directories:\n";
+      foreach ($possible_source_dirs as $dir) {
+        echo "  - $dir\n";
+      }
     }
-    
     return false;
-}
-
-/**
- * Download a rule file and check if it matches a tag expression.
- * 
- * @param string $file Rule filename
- * @param string $baseUrl Base URL for downloading
- * @param string $tempDir Temporary directory for downloads
- * @param string $tagExpression Tag expression to match against
- * @return bool True if the rule matches the tag expression
- */
-function ruleMatchesTags(string $file, string $baseUrl, string $tempDir, string $tagExpression): bool {
-    if (empty($tagExpression)) {
-        return true;
+  }
+  
+  $destination_dir = $options['destination'];
+  
+  // Ensure destination directory is not the same as source directory
+  if (realpath($source_dir) === realpath($destination_dir)) {
+    if ($options['debug']) {
+      echo "Source and destination directories are the same, downloading from GitHub instead...\n";
     }
     
-    $url = "{$baseUrl}/{$file}";
-    $tempFile = "{$tempDir}/{$file}";
-    
-    // Download the file to a temporary location
-    if (!downloadFile($url, $tempFile)) {
-        return false;
+    // Create a temporary directory for downloading rules
+    $temp_dir = sys_get_temp_dir() . '/cursor-rules-' . uniqid();
+    if (!mkdir($temp_dir, 0755, true)) {
+      echo "Error: Failed to create temporary directory.\n";
+      return false;
     }
     
-    // Read the file content
-    $content = file_get_contents($tempFile);
-    if ($content === false) {
-        return false;
+    $download_success = true;
+    $github_source = 'https://raw.githubusercontent.com/ivangrynenko/cursor-rules/main/.cursor/rules/';
+    
+    // Download all rules that need to be installed
+    if ($options['debug']) {
+      echo "Downloading " . count($rules_to_install) . " rules from GitHub...\n";
     }
     
-    // Extract tags and check if they match the expression
-    $tags = extractTags($content);
-    return matchesTagExpression($tags, $tagExpression);
-}
-
-if (!$quietMode) {
-    println(colorize('Cursor Rules Installer', 'blue'));
-    println('================================');
-    println();
-}
-
-$targetDir = '.cursor/rules';
-$baseUrl = 'https://raw.githubusercontent.com/ivangrynenko/cursor-rules/main/.cursor/rules';
-$updateMdUrl = 'https://raw.githubusercontent.com/ivangrynenko/cursor-rules/main/.cursor/UPDATE.md';
-
-// Create a temporary directory for tag checking
-$tempDir = sys_get_temp_dir() . '/cursor-rules-' . uniqid();
-if (!file_exists($tempDir)) {
-    mkdir($tempDir, 0755, true);
-}
-
-// Define rule categories
-$ruleCategories = [
-    'core' => [
-        'cursor-rules.mdc',
-        'improve-cursorrules-efficiency.mdc',
-        'git-commit-standards.mdc',
-        'readme-maintenance-standards.mdc',
-        'secret-detection.mdc', // Always include secret detection rule
-    ],
-    'web' => [
-        'accessibility-standards.mdc',
-        'api-standards.mdc',
-        'build-optimization.mdc',
-        'javascript-performance.mdc',
-        'javascript-standards.mdc',
-        'node-dependencies.mdc',
-        'react-patterns.mdc',
-        'tailwind-standards.mdc',
-        'third-party-integration.mdc',
-        'vue-best-practices.mdc',
-        'security-practices.mdc',
-    ],
-    'drupal' => [
-        'php-drupal-best-practices.mdc',
-        'drupal-database-standards.mdc',
-        'govcms-saas.mdc',
-        'drupal-broken-access-control.mdc',
-        'drupal-cryptographic-failures.mdc',
-        'drupal-injection.mdc',
-        'drupal-insecure-design.mdc',
-        'drupal-security-misconfiguration.mdc',
-        'drupal-vulnerable-components.mdc',
-        'drupal-authentication-failures.mdc',
-        'drupal-integrity-failures.mdc',
-        'drupal-logging-failures.mdc',
-        'drupal-ssrf.mdc',
-    ],
-    'python' => [
-        'python-broken-access-control.mdc',
-        'python-cryptographic-failures.mdc',
-        'python-injection.mdc',
-        'python-insecure-design.mdc',
-        'python-security-misconfiguration.mdc',
-        'python-vulnerable-outdated-components.mdc',
-        'python-authentication-failures.mdc',
-        'python-integrity-failures.mdc',
-        'python-logging-monitoring-failures.mdc',
-        'python-ssrf.mdc',
-    ],
-    'javascript-owasp' => [
-        'javascript-broken-access-control.mdc',
-        'javascript-cryptographic-failures.mdc',
-        'javascript-injection.mdc',
-        'javascript-insecure-design.mdc',
-        'javascript-security-misconfiguration.mdc',
-        'javascript-vulnerable-outdated-components.mdc',
-        'javascript-identification-authentication-failures.mdc',
-        'javascript-software-data-integrity-failures.mdc',
-        'javascript-security-logging-monitoring-failures.mdc',
-        'javascript-server-side-request-forgery.mdc',
-    ],
-];
-
-// Check if directory exists
-if (!file_exists($targetDir) && !$quietMode) {
-    println(colorize("Notice: Directory '{$targetDir}' does not exist.", 'yellow'));
-    println("It will be created during installation.");
-} elseif (!$quietMode) {
-    println(colorize("Warning: Directory '{$targetDir}' already exists.", 'yellow'));
-    println("Existing files with the same names will be overwritten.");
-}
-
-$selectedRules = [];
-
-// Process installation mode
-switch ($installMode) {
-    case 'tags':
-        if (!$quietMode) {
-            println(colorize("Selecting rules based on tag expression: {$tagExpression}", 'green'));
-        }
-        
-        // Get all available rules
-        $allRules = array_merge(
-            $ruleCategories['core'],
-            $ruleCategories['web'],
-            $ruleCategories['drupal'],
-            $ruleCategories['python'],
-            $ruleCategories['javascript-owasp']
-        );
-        
-        // Always include core rules
-        $selectedRules = $ruleCategories['core'];
-        
-        // Intelligent OWASP rule selection based on language tags
-        if (strpos($tagExpression, 'language:') !== false) {
-            // Extract language from tag expression
-            if (preg_match('/language:(php|javascript|python|js)/', $tagExpression, $matches)) {
-                $language = $matches[1];
-                if ($language === 'js') $language = 'javascript';
-                
-                // If the expression also contains OWASP or security tags, add language-specific OWASP rules
-                if (strpos($tagExpression, 'standard:owasp') !== false || 
-                    strpos($tagExpression, 'category:security') !== false) {
-                    
-                    // Add language-specific OWASP rules
-                    switch ($language) {
-                        case 'php':
-                        case 'drupal':
-                            if (!$quietMode) {
-                                println(colorize("Adding PHP/Drupal OWASP rules based on language tag", 'blue'));
-                            }
-                            $selectedRules = array_merge($selectedRules, $ruleCategories['drupal']);
-                            break;
-                        case 'javascript':
-                            if (!$quietMode) {
-                                println(colorize("Adding JavaScript OWASP rules based on language tag", 'blue'));
-                            }
-                            $selectedRules = array_merge($selectedRules, $ruleCategories['javascript-owasp']);
-                            break;
-                        case 'python':
-                            if (!$quietMode) {
-                                println(colorize("Adding Python OWASP rules based on language tag", 'blue'));
-                            }
-                            $selectedRules = array_merge($selectedRules, $ruleCategories['python']);
-                            break;
-                    }
-                }
-            }
-        }
-        
-        // Check each rule against the tag expression
-        foreach ($allRules as $rule) {
-            // Skip rules that are already included
-            if (in_array($rule, $selectedRules)) {
-                continue;
-            }
-            
-            if (ruleMatchesTags($rule, $baseUrl, $tempDir, $tagExpression)) {
-                $selectedRules[] = $rule;
-            }
-        }
-        
-        if (count($selectedRules) <= count($ruleCategories['core']) && !$quietMode) {
-            println(colorize("Warning: No additional rules matched the tag expression. Only core rules will be installed.", 'yellow'));
-        }
-        break;
-    case 'web-stack':
-        if (!$quietMode) {
-            println(colorize("Installing Web Stack rules...", 'green'));
-        }
-        $selectedRules = array_merge(
-            $ruleCategories['core'],
-            $ruleCategories['web'],
-            $ruleCategories['drupal']
-        );
-        break;
-    case 'python':
-        if (!$quietMode) {
-            println(colorize("Installing Python rules...", 'green'));
-        }
-        $selectedRules = array_merge(
-            $ruleCategories['core'],
-            $ruleCategories['python']
-        );
-        break;
-    case 'all':
-        if (!$quietMode) {
-            println(colorize("Installing all rules...", 'green'));
-        }
-        $selectedRules = array_merge(
-            $ruleCategories['core'],
-            $ruleCategories['web'],
-            $ruleCategories['drupal'],
-            $ruleCategories['python']
-        );
-        break;
-    case 'core':
-        if (!$quietMode) {
-            println(colorize("Installing core rules...", 'green'));
-        }
-        $selectedRules = $ruleCategories['core'];
-        break;
-    case 'custom':
-        if (!$quietMode) {
-            println(colorize("Custom Selection:", 'magenta'));
-            println();
-            
-            println(colorize("Core rules:", 'cyan'));
-        }
-        $installCore = strtolower(prompt("Install core rules? (Y/n)", "Y"));
-        if ($installCore === 'y') {
-            $selectedRules = array_merge($selectedRules, $ruleCategories['core']);
-        }
-        
-        if (!$quietMode) {
-            println(colorize("Web rules (JavaScript, CSS, etc):", 'cyan'));
-        }
-        $installWeb = strtolower(prompt("Install web rules? (Y/n)", "Y"));
-        if ($installWeb === 'y') {
-            $selectedRules = array_merge($selectedRules, $ruleCategories['web']);
+    foreach ($rules_to_install as $rule_file) {
+      $url = $github_source . $rule_file;
+      $content = @file_get_contents($url);
+      
+      if ($content === false) {
+        if ($options['debug']) {
+          echo "Failed to download: $rule_file\n";
         }
         
-        if (!$quietMode) {
-            println(colorize("Drupal rules:", 'cyan'));
+        // Check if the file exists locally in the destination directory
+        if (file_exists($destination_dir . '/' . $rule_file)) {
+          if ($options['debug']) {
+            echo "File exists locally, will use local copy: $rule_file\n";
+          }
+          // Copy the local file to the temp directory
+          copy($destination_dir . '/' . $rule_file, $temp_dir . '/' . $rule_file);
         }
-        $installDrupal = strtolower(prompt("Install Drupal rules? (Y/n)", "Y"));
-        if ($installDrupal === 'y') {
-            $selectedRules = array_merge($selectedRules, $ruleCategories['drupal']);
-        }
-        
-        if (!$quietMode) {
-            println(colorize("Python rules:", 'cyan'));
-        }
-        $installPython = strtolower(prompt("Install Python rules? (Y/n)", "n"));
-        if ($installPython === 'y') {
-            $selectedRules = array_merge($selectedRules, $ruleCategories['python']);
-        }
-        break;
-    default:
-        // Interactive mode if no options specified
-        if (!$quietMode) {
-            println(colorize("Select your primary use case:", 'cyan'));
-            println("1) " . colorize("Web Stack", 'white') . " (Drupal, PHP, JS, CSS)");
-            println("2) " . colorize("Python", 'white') . " (Python, Django, Flask)");
-            println("3) " . colorize("All Rules", 'white') . " (Install everything)");
-            println("4) " . colorize("Core Rules Only", 'white') . " (Essential rules only)");
-            println("5) " . colorize("Tag-Based Selection", 'white') . " (Filter by tags)");
-            println("6) " . colorize("Security Focus", 'white') . " (OWASP & security rules)");
-            println("7) " . colorize("Custom Selection", 'white') . " (Choose specific rule sets)");
-            println();
-        }
-        
-        $option = prompt("Enter option number", "1");
-        
-        switch ($option) {
-            case "1":
-                if (!$quietMode) {
-                    println(colorize("Installing Web Stack rules...", 'green'));
-                }
-                $selectedRules = array_merge(
-                    $ruleCategories['core'],
-                    $ruleCategories['web'],
-                    $ruleCategories['drupal']
-                );
-                break;
-            case "2":
-                if (!$quietMode) {
-                    println(colorize("Installing Python rules...", 'green'));
-                }
-                $selectedRules = array_merge(
-                    $ruleCategories['core'],
-                    $ruleCategories['python']
-                );
-                break;
-            case "3":
-                if (!$quietMode) {
-                    println(colorize("Installing all rules...", 'green'));
-                }
-                $selectedRules = array_merge(
-                    $ruleCategories['core'],
-                    $ruleCategories['web'],
-                    $ruleCategories['drupal'],
-                    $ruleCategories['python']
-                );
-                break;
-            case "4":
-                if (!$quietMode) {
-                    println(colorize("Core Rules Only:", 'magenta'));
-                    println("Select which core rules to install:");
-                    println("1) " . colorize("All Core Rules", 'white'));
-                    println("2) " . colorize("Core Rules (Essential)", 'white'));
-                    println();
-                }
-                
-                $coreOption = prompt("Enter option number", "1");
-                
-                // Always include core rules
-                $selectedRules = $ruleCategories['core'];
-                
-                switch ($coreOption) {
-                    case "1":
-                        if (!$quietMode) {
-                            println(colorize("Installing all core rules...", 'green'));
-                        }
-                        break;
-                    case "2":
-                        if (!$quietMode) {
-                            println(colorize("Installing core rules (essential only)", 'green'));
-                        }
-                        // Add essential core rules
-                        $selectedRules = array_merge($selectedRules, [
-                            'cursor-rules.mdc',
-                            'improve-cursorrules-efficiency.mdc',
-                            'git-commit-standards.mdc',
-                            'readme-maintenance-standards.mdc',
-                        ]);
-                        break;
-                    default:
-                        if (!$quietMode) {
-                            println(colorize("Invalid option. Installing all core rules by default.", 'yellow'));
-                        }
-                        $selectedRules = $ruleCategories['core'];
-                }
-                break;
-            case "5":
-                if (!$quietMode) {
-                    println(colorize("Tag-Based Selection:", 'magenta'));
-                    println("Enter a tag expression to filter rules.");
-                    println("Examples: \"language:php\", \"framework:drupal category:security\"");
-                    println();
-                }
-                
-                $tagExpression = prompt("Enter tag expression");
-                
-                if (empty($tagExpression)) {
-                    println(colorize("No tag expression provided. Installing core rules only.", 'yellow'));
-                    $selectedRules = $ruleCategories['core'];
-                } else {
-                    // Get all available rules
-                    $allRules = array_merge(
-                        $ruleCategories['core'],
-                        $ruleCategories['web'],
-                        $ruleCategories['drupal'],
-                        $ruleCategories['python']
-                    );
-                    
-                    // Always include core rules
-                    $selectedRules = $ruleCategories['core'];
-                    
-                    // Check each rule against the tag expression
-                    foreach ($allRules as $rule) {
-                        // Skip core rules as they're already included
-                        if (in_array($rule, $ruleCategories['core'])) {
-                            continue;
-                        }
-                        
-                        if (ruleMatchesTags($rule, $baseUrl, $tempDir, $tagExpression)) {
-                            $selectedRules[] = $rule;
-                        }
-                    }
-                    
-                    if (count($selectedRules) <= count($ruleCategories['core']) && !$quietMode) {
-                        println(colorize("Warning: No additional rules matched the tag expression. Only core rules will be installed.", 'yellow'));
-                    }
-                }
-                break;
-            case "6":
-                if (!$quietMode) {
-                    println(colorize("Security Focus Selection:", 'magenta'));
-                    println("Select which language-specific security rules to install:");
-                    println("1) " . colorize("PHP/Drupal Security", 'white'));
-                    println("2) " . colorize("JavaScript Security", 'white'));
-                    println("3) " . colorize("Python Security", 'white'));
-                    println("4) " . colorize("All Security Rules", 'white'));
-                    println();
-                }
-                
-                $secOption = prompt("Enter option number", "4");
-                
-                // Always include core rules
-                $selectedRules = $ruleCategories['core'];
-                
-                switch ($secOption) {
-                    case "1":
-                        if (!$quietMode) {
-                            println(colorize("Installing PHP/Drupal security rules...", 'green'));
-                        }
-                        // Use tag-based selection with the php-security preset
-                        $tagExpression = TAG_PRESETS['php-owasp'];
-                        foreach ($ruleCategories['drupal'] as $rule) {
-                            if (strpos($rule, 'drupal-') === 0) {
-                                $selectedRules[] = $rule;
-                            }
-                        }
-                        break;
-                    case "2":
-                        if (!$quietMode) {
-                            println(colorize("Installing JavaScript security rules...", 'green'));
-                        }
-                        // Add JavaScript OWASP rules
-                        $selectedRules = array_merge($selectedRules, $ruleCategories['javascript-owasp']);
-                        break;
-                    case "3":
-                        if (!$quietMode) {
-                            println(colorize("Installing Python security rules...", 'green'));
-                        }
-                        // Add Python OWASP rules
-                        $selectedRules = array_merge($selectedRules, $ruleCategories['python']);
-                        break;
-                    case "4":
-                    default:
-                        if (!$quietMode) {
-                            println(colorize("Installing all security rules...", 'green'));
-                        }
-                        // Add all OWASP rules
-                        $selectedRules = array_merge(
-                            $selectedRules,
-                            $ruleCategories['drupal'],
-                            $ruleCategories['python'],
-                            $ruleCategories['javascript-owasp']
-                        );
-                        break;
-                }
-                break;
-            case "7":
-                if (!$quietMode) {
-                    println(colorize("Custom Selection:", 'magenta'));
-                    println();
-                    
-                    println(colorize("Core rules:", 'cyan'));
-                }
-                $installCore = strtolower(prompt("Install core rules? (Y/n)", "Y"));
-                if ($installCore === 'y') {
-                    $selectedRules = array_merge($selectedRules, $ruleCategories['core']);
-                }
-                
-                if (!$quietMode) {
-                    println(colorize("Web rules (JavaScript, CSS, etc):", 'cyan'));
-                }
-                $installWeb = strtolower(prompt("Install web rules? (Y/n)", "Y"));
-                if ($installWeb === 'y') {
-                    $selectedRules = array_merge($selectedRules, $ruleCategories['web']);
-                }
-                
-                if (!$quietMode) {
-                    println(colorize("Drupal rules:", 'cyan'));
-                }
-                $installDrupal = strtolower(prompt("Install Drupal rules? (Y/n)", "Y"));
-                if ($installDrupal === 'y') {
-                    $selectedRules = array_merge($selectedRules, $ruleCategories['drupal']);
-                }
-                
-                if (!$quietMode) {
-                    println(colorize("Python rules:", 'cyan'));
-                }
-                $installPython = strtolower(prompt("Install Python rules? (Y/n)", "n"));
-                if ($installPython === 'y') {
-                    $selectedRules = array_merge($selectedRules, $ruleCategories['python']);
-                }
-                break;
-            default:
-                if (!$quietMode) {
-                    println(colorize("Invalid option. Installing Web Stack rules by default.", 'yellow'));
-                }
-                $selectedRules = array_merge(
-                    $ruleCategories['core'],
-                    $ruleCategories['web'],
-                    $ruleCategories['drupal']
-                );
-        }
-}
-
-if (!$autoConfirm) {
-    println();
-    println(colorize("Selected " . count($selectedRules) . " rules for installation.", 'blue'));
-    $confirm = strtolower(prompt('Do you want to proceed with the installation? (Y/n)', 'Y'));
-
-    if ($confirm !== 'y') {
-        println();
-        println(colorize('Installation cancelled by user.', 'red'));
-        
-        // Clean up temporary directory
-        if (file_exists($tempDir)) {
-            array_map('unlink', glob("$tempDir/*.*"));
-            rmdir($tempDir);
-        }
-        
-        exit(1);
+        continue;
+      }
+      
+      file_put_contents($temp_dir . '/' . $rule_file, $content);
+      if ($options['debug']) {
+        echo "Downloaded: $rule_file\n";
+      }
     }
-}
-
-// Create directory if it doesn't exist
-if (!$quietMode) {
-    println();
-    println('Starting installation...');
-}
-
-if (!file_exists($targetDir)) {
-    if (!mkdir($targetDir, 0755, TRUE)) {
-        println(colorize("Error: Failed to create directory '{$targetDir}'", 'red'));
-        
-        // Clean up temporary directory
-        if (file_exists($tempDir)) {
-            array_map('unlink', glob("$tempDir/*.*"));
-            rmdir($tempDir);
+    
+    // Verify we have at least the core rules
+    if (is_valid_source_dir($temp_dir, $rules_to_install)) {
+      $source_dir = $temp_dir;
+      if ($options['debug']) {
+        echo "Successfully downloaded rules from GitHub to: $temp_dir\n";
+      }
+    } else {
+      // Clean up temp directory
+      @rmdir($temp_dir);
+      
+      echo "Error: Could not download rules from GitHub. Please check your internet connection or try again later.\n";
+      echo "Alternatively, you can manually download the rules from https://github.com/ivangrynenko/cursor-rules\n";
+      return false;
+    }
+  }
+  
+  $copied_count = 0;
+  $failed_count = 0;
+  
+  if ($options['debug']) {
+    echo "Source directory: $source_dir\n";
+    echo "Destination directory: $destination_dir\n";
+    echo "Rules to install: " . count($rules_to_install) . "\n";
+  }
+  
+  foreach ($rules_to_install as $rule_file) {
+    $source_file = $source_dir . '/' . $rule_file;
+    $dest_file = $destination_dir . '/' . $rule_file;
+    
+    if (file_exists($source_file)) {
+      if (copy($source_file, $dest_file)) {
+        $copied_count++;
+        if ($options['debug']) {
+          echo "Copied: $rule_file\n";
         }
-        
-        exit(1);
+      } else {
+        $failed_count++;
+        echo "Failed to copy: $rule_file\n";
+      }
+    } else {
+      if ($options['debug']) {
+        echo "Source file not found: $source_file\n";
+      }
+    }
+  }
+  
+  if ($options['debug']) {
+    echo "Copied $copied_count files, failed to copy $failed_count files.\n";
+  }
+  
+  // Inform the user if we're updating existing rules
+  if (isset($temp_dir) && strpos($source_dir, $temp_dir) === 0 && is_dir($destination_dir)) {
+    echo "Updated existing Cursor Rules with the latest version.\n";
+  }
+  
+  // Clean up temporary directory if it was created
+  if (isset($temp_dir) && strpos($source_dir, $temp_dir) === 0) {
+    if ($options['debug']) {
+      echo "Cleaning up temporary directory: $temp_dir\n";
     }
-    if (!$quietMode) {
-        println(colorize("Created directory: {$targetDir}", 'green'));
+    
+    // Remove all files in the temp directory
+    $files = glob($temp_dir . '/*');
+    foreach ($files as $file) {
+      @unlink($file);
     }
+    
+    // Remove the directory
+    @rmdir($temp_dir);
+  }
+  
+  return true;
 }
 
-// Download and install selected rules
-$installedFiles = [];
-foreach ($selectedRules as $file) {
-    $url = "{$baseUrl}/{$file}";
-    $destination = "{$targetDir}/{$file}";
-    
-    // If we already downloaded the file for tag checking, move it
-    if (file_exists("{$tempDir}/{$file}")) {
-        if (rename("{$tempDir}/{$file}", $destination)) {
-            $installedFiles[] = $file;
-            if (!$quietMode) {
-                println("Installed {$file}");
+/**
+ * Display help information.
+ */
+function show_help(): void {
+  echo "Cursor Rules Installer v" . CURSOR_RULES_VERSION . "\n";
+  echo "Usage: php install.php [options]\n\n";
+  echo "Options:\n";
+  echo "  --help, -h           Show this help message\n";
+  echo "  --debug              Enable debug mode\n";
+  echo "  --copy-only          Only copy files, don't perform additional setup\n";
+  echo "  --destination=DIR    Specify destination directory (default: .cursor/rules)\n";
+  echo "  --web-stack, -w      Install web stack rules (PHP, Drupal, JavaScript, etc.)\n";
+  echo "  --python, -p         Install Python rules\n";
+  echo "  --javascript, -j     Install JavaScript rules\n";
+  echo "  --all, -a            Install all rules\n";
+  echo "  --core, -c           Install core rules only\n";
+  echo "  --tags, -t <query>   Filter rules by tag expression (e.g., \"language:php category:security\")\n";
+  echo "  --tag-preset <n>     Use a predefined tag preset (web, frontend, drupal, react, vue, python, security, owasp, a11y)\n";
+  echo "  --ignore-files <opt> Control installation of .cursorignore files (yes, no, ask), default's to yes\n";
+  echo "  --yes, -y            Automatically answer yes to all prompts\n";
+  echo "\n";
+  echo "Tag Expression Examples:\n";
+  echo "  \"language:php\"                           - All PHP rules\n";
+  echo "  \"language:javascript category:security\" - JavaScript security rules\n";
+  echo "  \"framework:drupal standard:owasp-top10\" - Drupal OWASP rules\n";
+  echo "  \"language:python OR language:php\"       - All Python or PHP rules\n";
+  echo "\n";
+  echo "Available Tag Presets:\n";
+  foreach (TAG_PRESETS as $preset => $expression) {
+    echo "  {$preset}: {$expression}\n";
+  }
+}
+
+// If this script is being run directly, execute the installation.
+if (basename(__FILE__) === basename($_SERVER['PHP_SELF'] ?? '')) {
+  // Default options
+  $options = [
+    'debug' => false,
+    'copy_only' => false,
+    'destination' => CURSOR_RULES_DIR,
+    'web_stack' => false,
+    'python' => false,
+    'javascript' => false,
+    'all' => false,
+    'core' => false,
+    'tags' => false,
+    'tag-preset' => false,
+    'ignore-files' => 'yes',
+    'yes' => false,
+    'help' => false,
+  ];
+  
+  // Check for command line arguments
+  if (isset($_SERVER['argv']) && is_array($_SERVER['argv']) && count($_SERVER['argv']) > 1) {
+    // Process arguments
+    $skip_next = false;
+    foreach ($_SERVER['argv'] as $i => $arg) {
+      // Skip the script name (first argument)
+      if ($i === 0 || $skip_next) {
+        $skip_next = false;
+        continue;
+      }
+      
+      // Process argument
+      switch ($arg) {
+        case '--debug':
+          $options['debug'] = true;
+          break;
+        case '--copy-only':
+          $options['copy_only'] = true;
+          break;
+        case '--web-stack':
+        case '-w':
+          $options['web_stack'] = true;
+          break;
+        case '--python':
+        case '-p':
+          $options['python'] = true;
+          break;
+        case '--javascript':
+        case '-j':
+          $options['javascript'] = true;
+          break;
+        case '--all':
+        case '-a':
+          $options['all'] = true;
+          break;
+        case '--core':
+        case '-c':
+          $options['core'] = true;
+          break;
+        case '--yes':
+        case '-y':
+          $options['yes'] = true;
+          break;
+        case '--help':
+        case '-h':
+          $options['help'] = true;
+          break;
+        case '--tags':
+        case '-t':
+          if (isset($_SERVER['argv'][$i + 1]) && !empty($_SERVER['argv'][$i + 1]) && substr($_SERVER['argv'][$i + 1], 0, 1) !== '-') {
+            $options['tags'] = $_SERVER['argv'][$i + 1];
+            $skip_next = true;
+          } else {
+            echo "Error: --tags/-t option requires a tag expression.\n";
+            exit(1);
+          }
+          break;
+        case '--tag-preset':
+          if (isset($_SERVER['argv'][$i + 1]) && !empty($_SERVER['argv'][$i + 1]) && substr($_SERVER['argv'][$i + 1], 0, 1) !== '-') {
+            $preset = $_SERVER['argv'][$i + 1];
+            if (isset(TAG_PRESETS[$preset])) {
+              $options['tag-preset'] = $preset;
+              $skip_next = true;
+            } else {
+              echo "Error: Unknown tag preset '{$preset}'. Available presets: " . implode(', ', array_keys(TAG_PRESETS)) . "\n";
+              exit(1);
             }
+          } else {
+            echo "Error: --tag-preset option requires a preset name.\n";
+            exit(1);
+          }
+          break;
+        case '--ignore-files':
+          if (isset($_SERVER['argv'][$i + 1]) && !empty($_SERVER['argv'][$i + 1]) && substr($_SERVER['argv'][$i + 1], 0, 1) !== '-') {
+            $ignoreFilesOption = strtolower($_SERVER['argv'][$i + 1]);
+            if ($ignoreFilesOption === 'yes' || $ignoreFilesOption === 'y' || 
+                $ignoreFilesOption === 'no' || $ignoreFilesOption === 'n' || 
+                $ignoreFilesOption === 'ask' || $ignoreFilesOption === 'a') {
+              $options['ignore-files'] = $ignoreFilesOption;
+              $skip_next = true;
+            } else {
+              echo "Warning: Invalid value for --ignore-files. Using default (yes).\n";
+            }
+          } else {
+            echo "Error: --ignore-files option requires a value (yes, no, or ask).\n";
+            exit(1);
+          }
+          break;
+        default:
+          // Check for --destination=DIR format
+          if (str_starts_with($arg, '--destination=')) {
+            $options['destination'] = substr($arg, 14);
+          } else {
+            echo "Warning: Unknown option '$arg'\n";
+            exit(1);
+          }
+          break;
+      }
+    }
+  }
+  
+  // Run the installation.
+  $result = install_cursor_rules($options);
+  
+  // Output result.
+  if ($result) {
+    echo "Cursor Rules installed successfully!\n";
+    
+    // Check if we should prompt to remove the installer file
+    $stdin_available = function_exists('stream_isatty') ? stream_isatty(STDIN) : false;
+    $script_path = $_SERVER['SCRIPT_FILENAME'] ?? __FILE__;
+    
+    if ($stdin_available && file_exists($script_path) && basename($script_path) === 'install.php') {
+      echo "\nWould you like to remove the installer file? (Y/n): ";
+      $remove_installer = strtolower(trim(fgets(STDIN)));
+      
+      if ($remove_installer === '' || $remove_installer === 'y' || $remove_installer === 'yes') {
+        if (unlink($script_path)) {
+          echo "Installer file removed successfully.\n";
         } else {
-            println(colorize("Error: Failed to install {$file}", 'red'));
-        }
-    } else {
-        if (!$quietMode) {
-            println("Downloading {$file}...");
-        }
-        if (downloadFile($url, $destination)) {
-            $installedFiles[] = $file;
-        } else {
-            println(colorize("Error: Failed to download {$file}", 'red'));
+          echo "Failed to remove installer file. You may delete it manually.\n";
         }
-    }
-}
-
-// Download UPDATE.md
-if (!$quietMode) {
-    println("Downloading UPDATE.md...");
-}
-if (downloadFile($updateMdUrl, '.cursor/UPDATE.md')) {
-    $installedFiles[] = 'UPDATE.md';
-} else {
-    println(colorize("Error: Failed to download UPDATE.md", 'red'));
-}
-
-// Install ignore files if requested
-$ignoreFiles = [
-    '.cursorignore' => 'https://raw.githubusercontent.com/ivangrynenko/cursor-rules/main/.cursorignore',
-    '.cursorindexingignore' => 'https://raw.githubusercontent.com/ivangrynenko/cursor-rules/main/.cursorindexingignore'
-];
-
-$shouldInstallIgnoreFiles = false;
-
-if ($installIgnoreFiles === 'yes') {
-    $shouldInstallIgnoreFiles = true;
-} elseif ($installIgnoreFiles === 'ask' && !$autoConfirm) {
-    println();
-    println(colorize("Would you like to install .cursorignore and .cursorindexingignore files?", 'cyan'));
-    println("These files help Cursor AI ignore sensitive files and improve search quality.");
-    $response = strtolower(prompt("Install ignore files? (Y/n)", "Y"));
-    $shouldInstallIgnoreFiles = ($response === 'y');
-} elseif ($installIgnoreFiles === 'ask' && $autoConfirm) {
-    // If auto-confirm is enabled and we're set to ask, default to yes
-    $shouldInstallIgnoreFiles = true;
-}
-
-if ($shouldInstallIgnoreFiles) {
-    if (!$quietMode) {
-        println();
-        println(colorize("Installing ignore files...", 'blue'));
+      } else {
+        echo "Installer file kept. You may remove it manually if needed.\n";
+      }
     }
     
-    foreach ($ignoreFiles as $file => $url) {
-        $fileExists = file_exists($file);
+    exit(0);
+  } else {
+    echo "Installation failed!\n";
+    exit(1);
+  }
+}
+
+// Parse command line arguments.
+function parse_args() {
+  global $argv;
+  
+  $options = [
+    'yes' => false,
+    'core' => false,
+    'web_stack' => false,
+    'python' => false,
+    'all' => false,
+    'destination' => getcwd() . '/.cursor/rules',
+    'debug' => false,
+  ];
+  
+  $option_count = 0;
+  
+  if (isset($argv) && count($argv) > 1) {
+    for ($i = 1; $i < count($argv); $i++) {
+      $arg = $argv[$i];
+      
+      switch ($arg) {
+        case '--help':
+        case '-h':
+          echo "Usage: php install.php [options]\n";
+          echo "Options:\n";
+          echo "  --help, -h          Show this help message\n";
+          echo "  --yes, -y           Automatically answer yes to all prompts\n";
+          echo "  --core              Install core rules only\n";
+          echo "  --web-stack         Install web stack rules (includes core rules)\n";
+          echo "  --python            Install Python rules (includes core rules)\n";
+          echo "  --javascript, -j    Install JavaScript rules (includes core rules)\n";
+          echo "  --all               Install all rules\n";
+          echo "  --destination=DIR   Install to a custom directory (default: .cursor/rules)\n";
+          echo "  --debug             Enable debug output for troubleshooting\n";
+          exit(0);
         
-        if ($fileExists && !$autoConfirm) {
-            println(colorize("File '{$file}' already exists.", 'yellow'));
-            $overwrite = strtolower(prompt("Overwrite? (y/N)", "N"));
-            if ($overwrite !== 'y') {
-                if (!$quietMode) {
-                    println("Skipping {$file}");
-                }
-                continue;
-            }
-        } elseif ($fileExists && $autoConfirm) {
-            // With auto-confirm, we'll skip existing files by default
-            if (!$quietMode) {
-                println(colorize("File '{$file}' already exists. Skipping.", 'yellow'));
-            }
-            continue;
-        }
+        case '--yes':
+        case '-y':
+          $options['yes'] = true;
+          break;
         
-        if (!$quietMode) {
-            println("Downloading {$file}...");
-        }
+        case '--core':
+          $options['core'] = true;
+          $option_count++;
+          break;
         
-        if (downloadFile($url, $file)) {
-            $installedFiles[] = $file;
-            if (!$quietMode) {
-                println(colorize("Installed {$file}", 'green'));
-            }
-        } else {
-            println(colorize("Error: Failed to download {$file}", 'red'));
-        }
-    }
-}
-
-// Clean up temporary directory
-if (file_exists($tempDir)) {
-    array_map('unlink', glob("$tempDir/*.*"));
-    rmdir($tempDir);
-}
-
-if (!$quietMode) {
-    println();
-    println(colorize('Installation Complete!', 'green'));
-    println('--------------------------------');
-    println(colorize('Installed files:', 'blue'));
-    foreach ($installedFiles as $file) {
-        println("✓ {$file}");
+        case '--web-stack':
+          $options['web_stack'] = true;
+          $option_count++;
+          break;
+        
+        case '--python':
+          $options['python'] = true;
+          $option_count++;
+          break;
+        
+        case '--javascript':
+        case '-j':
+          $options['javascript'] = true;
+          $option_count++;
+          break;
+          
+        case '--all':
+          $options['all'] = true;
+          $option_count++;
+          break;
+          
+        case '--debug':
+          $options['debug'] = true;
+          break;
+        
+        default:
+          // Check for --destination=DIR format
+          if (str_starts_with($arg, '--destination=')) {
+            $options['destination'] = substr($arg, 14);
+          } else {
+            echo "Warning: Unknown option '$arg'\n";
+            exit(1);
+          }
+          break;
+      }
     }
-    println();
-    println(colorize('Cursor rules have been installed successfully!', 'green'));
-    println('You can now use these rules in your project.');
-    println('For information on updating rules, see .cursor/UPDATE.md');
-}
-
-@unlink(__FILE__); 
\ No newline at end of file
+  }
+  
+  return [$options, $option_count];
+} 
